{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "app"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "b2ot"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "b3ot"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "bsz"
            },
            init: {
                type: "Literal",
                value: 0.125,
                raw: "0.125"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "cashb"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dallow"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "davg"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "db"
            },
            init: {
                type: "Literal",
                raw: "null"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dbfn"
            },
            init: {
                type: "Literal",
                value: "Finance.db",
                raw: "\"Finance.db\""
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dirty2"
            },
            init: {
                type: "Literal",
                value: False,
                raw: "false"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dirty3"
            },
            init: {
                type: "Literal",
                value: False,
                raw: "false"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dirty4"
            },
            init: {
                type: "Literal",
                value: False,
                raw: "false"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dtbl_cs"
            },
            init: {
                type: "Literal",
                value: "CREATE TABLE daily (ts TIMESTAMP PRIMARY KEY,cash_recd REAL,fs_recd REAL,dx_recd REAL,cash_spent REAL,fs_spent REAL,dx_spent REAL)",
                raw: "\"CREATE TABLE daily (ts TIMESTAMP PRIMARY KEY,cash_recd REAL,fs_recd REAL,dx_recd REAL,cash_spent REAL,fs_spent REAL,dx_spent REAL)\""
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dtot"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "dxb"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "et"
            },
            init: {
                type: "NewExpression",
                callee: {
                    type: "Identifier",
                    name: "EventTarget"
                },
                arguments: []
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "fsb"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "ietbl_cs"
            },
            init: {
                type: "Literal",
                value: "CREATE TABLE inc_exp (bts TIMESTAMP NOT NULL,ets TIMESTAMP NOT NULL PRIMARY KEY,cash_recd REAL,fs_recd REAL,dx_recd REAL,cash_spent REAL,fs_spent REAL,dx_spent REAL)",
                raw: "\"CREATE TABLE inc_exp (bts TIMESTAMP NOT NULL,ets TIMESTAMP NOT NULL PRIMARY KEY,cash_recd REAL,fs_recd REAL,dx_recd REAL,cash_spent REAL,fs_spent REAL,dx_spent REAL)\""
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "inec"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "losz"
            },
            init: {
                type: "Literal",
                value: 0.075,
                raw: "0.075"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "lts"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "maxdl"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "mtbl_cs"
            },
            init: {
                type: "Literal",
                value: "CREATE TABLE monthly (ts TIMESTAMP PRIMARY KEY,cash_recd REAL,fs_recd REAL,dx_recd REAL,cash_spent REAL,fs_spent REAL,dx_spent REAL)",
                raw: "\"CREATE TABLE monthly (ts TIMESTAMP PRIMARY KEY,cash_recd REAL,fs_recd REAL,dx_recd REAL,cash_spent REAL,fs_spent REAL,dx_spent REAL)\""
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "rcb"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "set_handler"
            },
            init: {
                type: "ObjectExpression",
                properties: [
                    {
                        type: "Property",
                        key: {
                            type: "Identifier",
                            name: "set"
                        },
                        computed: False,
                        value: {
                            type: "FunctionExpression",
                            expression: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "obj"
                                },
                                {
                                    type: "Identifier",
                                    name: "prop"
                                },
                                {
                                    type: "Identifier",
                                    name: "val"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "VariableDeclaration",
                                        declarations: [
                                            {
                                                type: "VariableDeclarator",
                                                id: {
                                                    type: "Identifier",
                                                    name: "oval"
                                                },
                                                init: {
                                                    type: "MemberExpression",
                                                    computed: True,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "obj"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "prop"
                                                    }
                                                }
                                            }
                                        ],
                                        kind: "let"
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "MemberExpression",
                                                computed: True,
                                                object: {
                                                    type: "Identifier",
                                                    name: "obj"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "prop"
                                                }
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "val"
                                            }
                                        }
                                    },
                                    {
                                        type: "IfStatement",
                                        test: {
                                            type: "LogicalExpression",
                                            operator: "&&",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "!=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "val"
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "oval"
                                                }
                                            },
                                            right: {
                                                type: "BinaryExpression",
                                                operator: "==",
                                                left: {
                                                    type: "Identifier",
                                                    name: "prop"
                                                },
                                                right: {
                                                    type: "Literal",
                                                    value: "num",
                                                    raw: "\"num\""
                                                }
                                            }
                                        },
                                        consequent: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "et"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "dispatchEvent"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "NewExpression",
                                                                callee: {
                                                                    type: "Identifier",
                                                                    name: "Event"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "obj"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "name"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: "-changed",
                                                                            raw: "\"-changed\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ReturnStatement",
                                        argument: {
                                            type: "Literal",
                                            value: True,
                                            raw: "true"
                                        }
                                    }
                                ]
                            },
                            generator: False
                        },
                        kind: "init",
                        method: False,
                        shorthand: False
                    }
                ]
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "tesz"
            },
            init: {
                type: "Literal",
                value: 0.066,
                raw: "0.066"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "tleft"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "tsz"
            },
            init: {
                type: "Literal",
                value: 0.045,
                raw: "0.045"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "uc"
            },
            init: {
                type: "Literal",
                value: 0,
                raw: "0"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "updated"
            },
            init: {
                type: "Literal",
                value: False,
                raw: "false"
            }
        }
    ],
    kind: "var"
}
{
    type: "VariableDeclaration",
    declarations: [
        {
            type: "VariableDeclarator",
            id: {
                type: "Identifier",
                name: "uspop"
            },
            init: {
                type: "Literal",
                value: 324459463,
                raw: "324459463"
            }
        }
    ],
    kind: "var"
}
{
    type: "ExpressionStatement",
    expression: {
        type: "AssignmentExpression",
        operator: "=",
        left: {
            type: "MemberExpression",
            computed: False,
            object: {
                type: "Identifier",
                name: "app"
            },
            property: {
                type: "Identifier",
                name: "UpdateProgressBar"
            }
        },
        right: {
            type: "FunctionExpression",
            expression: False,
            isAsync: False,
            params: [
                {
                    type: "Identifier",
                    name: "percent"
                },
                {
                    type: "Identifier",
                    name: "options"
                }
            ],
            body: {
                type: "BlockStatement",
                body: [
                    {
                        type: "ExpressionStatement",
                        expression: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "prompt"
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "#",
                                    raw: "\"#\""
                                },
                                {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: "App.UpdateProgressBar(\f",
                                                raw: "\"App.UpdateProgressBar(\\f\""
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "percent"
                                            }
                                        },
                                        right: {
                                            type: "Literal",
                                            value: "\f",
                                            raw: "\"\\f\""
                                        }
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "options"
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            generator: False
        }
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "d2t"
    },
    params: [
        {
            type: "Identifier",
            name: "dv"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "d"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "floor"
                                }
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "dv"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "h"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "floor"
                                }
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "%",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "*",
                                        left: {
                                            type: "Identifier",
                                            name: "dv"
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 24,
                                            raw: "24"
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 24,
                                        raw: "24"
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "m"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "round"
                                }
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "%",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "*",
                                        left: {
                                            type: "Identifier",
                                            name: "dv"
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "*",
                                            left: {
                                                type: "Literal",
                                                value: 24,
                                                raw: "24"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 60,
                                                raw: "60"
                                            }
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 60,
                                        raw: "60"
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "BinaryExpression",
                    operator: "+",
                    left: {
                        type: "BinaryExpression",
                        operator: "+",
                        left: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "Identifier",
                                        name: "d"
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "d,",
                                        raw: "\"d,\""
                                    }
                                },
                                right: {
                                    type: "Identifier",
                                    name: "h"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "h,",
                                raw: "\"h,\""
                            }
                        },
                        right: {
                            type: "Identifier",
                            name: "m"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: "m",
                        raw: "\"m\""
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "dallow_calc"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "da"
                        },
                        init: {
                            type: "BinaryExpression",
                            operator: "/",
                            left: {
                                type: "BinaryExpression",
                                operator: "+",
                                left: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "cashb"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "num"
                                    }
                                },
                                right: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "dxb"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "num"
                                    }
                                }
                            },
                            right: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "maxdl"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "num"
                                }
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "dallow"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetText"
                        }
                    },
                    arguments: [
                        {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "ncs"
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "da"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "dallow"
                        },
                        property: {
                            type: "Identifier",
                            name: "save"
                        }
                    },
                    arguments: []
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "davg_dtot_calc"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "res"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "sql"
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "SELECT * FROM daily WHERE 'ts' IS NOT NULL ORDER BY 'ts' ASC;",
                                        raw: "\"SELECT * FROM daily WHERE 'ts' IS NOT NULL ORDER BY 'ts' ASC;\""
                                    }
                                ]
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "rc"
                        },
                        init: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "res"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "rows"
                                }
                            },
                            property: {
                                type: "Identifier",
                                name: "length"
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "sc"
                    },
                    right: {
                        type: "Literal",
                        value: 14,
                        raw: "14"
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "bd"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Date"
                        },
                        arguments: [
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "res"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "rows"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "item"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "BinaryExpression",
                                            operator: "-",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "-",
                                                left: {
                                                    type: "Identifier",
                                                    name: "rc"
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "sc"
                                                }
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                                raw: "1"
                                            }
                                        }
                                    ]
                                },
                                property: {
                                    type: "Identifier",
                                    name: "ts"
                                }
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "ed"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Date"
                        },
                        arguments: [
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "res"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "rows"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "item"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "BinaryExpression",
                                            operator: "-",
                                            left: {
                                                type: "Identifier",
                                                name: "rc"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                                raw: "1"
                                            }
                                        }
                                    ]
                                },
                                property: {
                                    type: "Identifier",
                                    name: "ts"
                                }
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dd"
                    },
                    right: {
                        type: "BinaryExpression",
                        operator: "/",
                        left: {
                            type: "BinaryExpression",
                            operator: "-",
                            left: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "ed"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "getTime"
                                    }
                                },
                                arguments: []
                            },
                            right: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "bd"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "getTime"
                                    }
                                },
                                arguments: []
                            }
                        },
                        right: {
                            type: "BinaryExpression",
                            operator: "*",
                            left: {
                                type: "BinaryExpression",
                                operator: "*",
                                left: {
                                    type: "BinaryExpression",
                                    operator: "*",
                                    left: {
                                        type: "Literal",
                                        value: 1000,
                                        raw: "1000"
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 60,
                                        raw: "60"
                                    }
                                },
                                right: {
                                    type: "Literal",
                                    value: 60,
                                    raw: "60"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: 24,
                                raw: "24"
                            }
                        }
                    }
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "te"
                        },
                        init: {
                            type: "Literal",
                            value: 0,
                            raw: "0"
                        }
                    }
                ],
                kind: "var"
            },
            {
                type: "ForStatement",
                init: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "i"
                    },
                    right: {
                        type: "BinaryExpression",
                        operator: "-",
                        left: {
                            type: "BinaryExpression",
                            operator: "-",
                            left: {
                                type: "Identifier",
                                name: "rc"
                            },
                            right: {
                                type: "Identifier",
                                name: "sc"
                            }
                        },
                        right: {
                            type: "Literal",
                            value: 1,
                            raw: "1"
                        }
                    }
                },
                test: {
                    type: "BinaryExpression",
                    operator: "<",
                    left: {
                        type: "Identifier",
                        name: "i"
                    },
                    right: {
                        type: "Identifier",
                        name: "rc"
                    }
                },
                update: {
                    type: "UpdateExpression",
                    operator: "++",
                    argument: {
                        type: "Identifier",
                        name: "i"
                    },
                    prefix: False
                },
                body: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "r"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "res"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "rows"
                                                }
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "item"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "i"
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "+=",
                                left: {
                                    type: "Identifier",
                                    name: "te"
                                },
                                right: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "r"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "cash_spent"
                                    }
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "+=",
                                left: {
                                    type: "Identifier",
                                    name: "te"
                                },
                                right: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "r"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "dx_spent"
                                    }
                                }
                            }
                        },
                        {
                            type: "IfStatement",
                            test: {
                                type: "BinaryExpression",
                                operator: "==",
                                left: {
                                    type: "Identifier",
                                    name: "i"
                                },
                                right: {
                                    type: "BinaryExpression",
                                    operator: "-",
                                    left: {
                                        type: "Identifier",
                                        name: "rc"
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 1,
                                        raw: "1"
                                    }
                                }
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "VariableDeclaration",
                                        declarations: [
                                            {
                                                type: "VariableDeclarator",
                                                id: {
                                                    type: "Identifier",
                                                    name: "tmp"
                                                },
                                                init: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "ncs"
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "r"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "cash_spent"
                                                                }
                                                            },
                                                            right: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "r"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "dx_spent"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ],
                                        kind: "let"
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "dtot"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "te"
                                                    }
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "SetText"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "tmp"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "dtot"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "save"
                                                }
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "dtot"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "lbl"
                                                    }
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "SetText"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "r"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "ts"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "tmp"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "ncs"
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "/",
                                    left: {
                                        type: "Identifier",
                                        name: "te"
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "dd"
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "davg"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetText"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "tmp"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "davg"
                        },
                        property: {
                            type: "Identifier",
                            name: "save"
                        }
                    },
                    arguments: []
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "dbbackup"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "TryStatement",
                block: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "fe1"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "FileExists"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "fn1"
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "var"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "fe2"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "FileExists"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "fn2"
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "var"
                        },
                        {
                            type: "IfStatement",
                            test: {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "Identifier",
                                    name: "fe1"
                                },
                                right: {
                                    type: "UnaryExpression",
                                    prefix: True,
                                    operator: "!",
                                    argument: {
                                        type: "Identifier",
                                        name: "fe2"
                                    }
                                }
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "app"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "CopyFile"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "fn1"
                                                },
                                                {
                                                    type: "Identifier",
                                                    name: "fn2"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "VariableDeclaration",
                                        declarations: [
                                            {
                                                type: "VariableDeclarator",
                                                id: {
                                                    type: "Identifier",
                                                    name: "fe2"
                                                },
                                                init: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "app"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "FileExists"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "fn2"
                                                        }
                                                    ]
                                                }
                                            }
                                        ],
                                        kind: "var"
                                    },
                                    {
                                        type: "IfStatement",
                                        test: {
                                            type: "UnaryExpression",
                                            prefix: True,
                                            operator: "!",
                                            argument: {
                                                type: "Identifier",
                                                name: "fe2"
                                            }
                                        },
                                        consequent: {
                                            type: "ThrowStatement",
                                            argument: {
                                                type: "NewExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "Error"
                                                },
                                                arguments: [
                                                    {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "Literal",
                                                                value: "file ",
                                                                raw: "\"file \""
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "fn2"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: " didn't arrive",
                                                            raw: "\" didn't arrive\""
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            alternate: {
                                type: "IfStatement",
                                test: {
                                    type: "LogicalExpression",
                                    operator: "&&",
                                    left: {
                                        type: "Identifier",
                                        name: "fe1"
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "fe2"
                                    }
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "d1"
                                                    },
                                                    init: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "app"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "GetFileDate"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "fn1"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            kind: "var"
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "d2"
                                                    },
                                                    init: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "app"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "GetFileDate"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "fn2"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            kind: "var"
                                        },
                                        {
                                            type: "IfStatement",
                                            test: {
                                                type: "BinaryExpression",
                                                operator: ">",
                                                left: {
                                                    type: "Identifier",
                                                    name: "d1"
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "d2"
                                                }
                                            },
                                            consequent: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ExpressionStatement",
                                                        expression: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "app"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "CopyFile"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Identifier",
                                                                    name: "fn1"
                                                                },
                                                                {
                                                                    type: "Identifier",
                                                                    name: "fn2"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        type: "VariableDeclaration",
                                                        declarations: [
                                                            {
                                                                type: "VariableDeclarator",
                                                                id: {
                                                                    type: "Identifier",
                                                                    name: "fe2"
                                                                },
                                                                init: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "app"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "FileExists"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "fn2"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        kind: "var"
                                                    },
                                                    {
                                                        type: "IfStatement",
                                                        test: {
                                                            type: "UnaryExpression",
                                                            prefix: True,
                                                            operator: "!",
                                                            argument: {
                                                                type: "Identifier",
                                                                name: "fe2"
                                                            }
                                                        },
                                                        consequent: {
                                                            type: "ThrowStatement",
                                                            argument: {
                                                                type: "NewExpression",
                                                                callee: {
                                                                    type: "Identifier",
                                                                    name: "Error"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "Literal",
                                                                                value: "file ",
                                                                                raw: "\"file \""
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "fn2"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: " is now missing",
                                                                            raw: "\" is now missing\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        type: "ExpressionStatement",
                                                        expression: {
                                                            type: "AssignmentExpression",
                                                            operator: "=",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "d2"
                                                            },
                                                            right: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "app"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "GetFileDate"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Identifier",
                                                                        name: "fn2"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        type: "IfStatement",
                                                        test: {
                                                            type: "BinaryExpression",
                                                            operator: ">",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "d1"
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "d2"
                                                            }
                                                        },
                                                        consequent: {
                                                            type: "ThrowStatement",
                                                            argument: {
                                                                type: "NewExpression",
                                                                callee: {
                                                                    type: "Identifier",
                                                                    name: "Errorr"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "Literal",
                                                                                value: "file ",
                                                                                raw: "\"file \""
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "fn2"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: " didn't copy",
                                                                            raw: "\" didn't copy\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                handler: {
                    type: "CatchClause",
                    param: {
                        type: "Identifier",
                        name: "e"
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "app"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "Alert"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "e"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "dbinstall"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "TryStatement",
                block: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "fe1"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "FileExists"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "fn1"
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "var"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "fe2"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "FileExists"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "fn2"
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "var"
                        },
                        {
                            type: "IfStatement",
                            test: {
                                type: "UnaryExpression",
                                prefix: True,
                                operator: "!",
                                argument: {
                                    type: "Identifier",
                                    name: "fe2"
                                }
                            },
                            consequent: {
                                type: "ThrowStatement",
                                argument: {
                                    type: "NewExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "Error"
                                    },
                                    arguments: [
                                        {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "+",
                                                left: {
                                                    type: "Literal",
                                                    value: "backup db ",
                                                    raw: "\"backup db \""
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "fn2"
                                                }
                                            },
                                            right: {
                                                type: "Literal",
                                                value: " not found.",
                                                raw: "\" not found.\""
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            type: "IfStatement",
                            test: {
                                type: "LogicalExpression",
                                operator: "&&",
                                left: {
                                    type: "UnaryExpression",
                                    prefix: True,
                                    operator: "!",
                                    argument: {
                                        type: "Identifier",
                                        name: "fe1"
                                    }
                                },
                                right: {
                                    type: "Identifier",
                                    name: "fe2"
                                }
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "app"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "CopyFile"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "fn2"
                                                },
                                                {
                                                    type: "Identifier",
                                                    name: "fn1"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "Identifier",
                                                name: "fe1"
                                            },
                                            right: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "app"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "FileExists"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        type: "Identifier",
                                                        name: "fn1"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        type: "IfStatement",
                                        test: {
                                            type: "UnaryExpression",
                                            prefix: True,
                                            operator: "!",
                                            argument: {
                                                type: "Identifier",
                                                name: "fe1"
                                            }
                                        },
                                        consequent: {
                                            type: "ThrowStatement",
                                            argument: {
                                                type: "NewExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "Error"
                                                },
                                                arguments: [
                                                    {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "Literal",
                                                                value: "file ",
                                                                raw: "\"file \""
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "fn2"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: " didn't copy",
                                                            raw: "\" didn't copy\""
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            alternate: {
                                type: "IfStatement",
                                test: {
                                    type: "LogicalExpression",
                                    operator: "&&",
                                    left: {
                                        type: "Identifier",
                                        name: "fe1"
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "fe2"
                                    }
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "d1"
                                                    },
                                                    init: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "app"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "GetFileDate"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "fn1"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            kind: "var"
                                        },
                                        {
                                            type: "VariableDeclaration",
                                            declarations: [
                                                {
                                                    type: "VariableDeclarator",
                                                    id: {
                                                        type: "Identifier",
                                                        name: "d2"
                                                    },
                                                    init: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "app"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "GetFileDate"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "fn2"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            kind: "var"
                                        },
                                        {
                                            type: "IfStatement",
                                            test: {
                                                type: "BinaryExpression",
                                                operator: ">",
                                                left: {
                                                    type: "Identifier",
                                                    name: "d2"
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "d1"
                                                }
                                            },
                                            consequent: {
                                                type: "BlockStatement",
                                                body: [
                                                    {
                                                        type: "ExpressionStatement",
                                                        expression: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "app"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "CopyFile"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Identifier",
                                                                    name: "fn2"
                                                                },
                                                                {
                                                                    type: "Identifier",
                                                                    name: "fn1"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        type: "ExpressionStatement",
                                                        expression: {
                                                            type: "AssignmentExpression",
                                                            operator: "=",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "fe1"
                                                            },
                                                            right: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "app"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "FileExists"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "Identifier",
                                                                        name: "fn1"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        type: "IfStatement",
                                                        test: {
                                                            type: "UnaryExpression",
                                                            prefix: True,
                                                            operator: "!",
                                                            argument: {
                                                                type: "Identifier",
                                                                name: "fe1"
                                                            }
                                                        },
                                                        consequent: {
                                                            type: "ThrowStatement",
                                                            argument: {
                                                                type: "NewExpression",
                                                                callee: {
                                                                    type: "Identifier",
                                                                    name: "Error"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "Literal",
                                                                                value: "file ",
                                                                                raw: "\"file \""
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "fn1"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: " didn't copy",
                                                                            raw: "\" didn't copy\""
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                alternate: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ThrowStatement",
                                            argument: {
                                                type: "NewExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "Error"
                                                },
                                                arguments: [
                                                    {
                                                        type: "Literal",
                                                        value: "one or more files missing",
                                                        raw: "\"one or more files missing\""
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                handler: {
                    type: "CatchClause",
                    param: {
                        type: "Identifier",
                        name: "e"
                    },
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "app"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "Alert"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "e"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "dbps"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "fn1"
                        },
                        init: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "app"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "GetPrivateFolder"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "",
                                        raw: "\"\""
                                    }
                                ]
                            },
                            right: {
                                type: "Literal",
                                value: "/../databases",
                                raw: "\"/../databases\""
                            }
                        }
                    }
                ],
                kind: "var"
            },
            {
                type: "IfStatement",
                test: {
                    type: "BinaryExpression",
                    operator: "!=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "fn1"
                        },
                        property: {
                            type: "Identifier",
                            name: "length"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: 0,
                        raw: "0"
                    }
                },
                consequent: {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "+=",
                        left: {
                            type: "Identifier",
                            name: "fn1"
                        },
                        right: {
                            type: "Literal",
                            value: "/",
                            raw: "\"/\""
                        }
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "+=",
                    left: {
                        type: "Identifier",
                        name: "fn1"
                    },
                    right: {
                        type: "Identifier",
                        name: "dbfn"
                    }
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "fn2"
                        },
                        init: {
                            type: "Literal",
                            value: "/sdcard/projects/blog",
                            raw: "\"/sdcard/projects/blog\""
                        }
                    }
                ],
                kind: "var"
            },
            {
                type: "IfStatement",
                test: {
                    type: "BinaryExpression",
                    operator: "!=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "fn2"
                        },
                        property: {
                            type: "Identifier",
                            name: "length"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: 0,
                        raw: "0"
                    }
                },
                consequent: {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "+=",
                        left: {
                            type: "Identifier",
                            name: "fn2"
                        },
                        right: {
                            type: "Literal",
                            value: "/",
                            raw: "\"/\""
                        }
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "+=",
                    left: {
                        type: "Identifier",
                        name: "fn2"
                    },
                    right: {
                        type: "Identifier",
                        name: "dbfn"
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "de"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ReturnStatement",
                argument: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "tblexists"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "daily",
                                raw: "\"daily\""
                            }
                        ]
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "dl"
    },
    params: [
        {
            type: "Identifier",
            name: "m"
        },
        {
            type: "Identifier",
            name: "dom"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "cd"
                        },
                        init: {
                            type: "NewExpression",
                            callee: {
                                type: "Identifier",
                                name: "Date"
                            },
                            arguments: []
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "nd"
                        },
                        init: {
                            type: "NewExpression",
                            callee: {
                                type: "Identifier",
                                name: "Date"
                            },
                            arguments: []
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "ms"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "round"
                                }
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "%",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "*",
                                        left: {
                                            type: "Identifier",
                                            name: "dom"
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "*",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "*",
                                                left: {
                                                    type: "Literal",
                                                    value: 24,
                                                    raw: "24"
                                                },
                                                right: {
                                                    type: "Literal",
                                                    value: 60,
                                                    raw: "60"
                                                }
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 60,
                                                raw: "60"
                                            }
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 60,
                                        raw: "60"
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "mm"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "floor"
                                }
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "%",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "*",
                                        left: {
                                            type: "Identifier",
                                            name: "dom"
                                        },
                                        right: {
                                            type: "BinaryExpression",
                                            operator: "*",
                                            left: {
                                                type: "Literal",
                                                value: 24,
                                                raw: "24"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 60,
                                                raw: "60"
                                            }
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 60,
                                        raw: "60"
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "mh"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "floor"
                                }
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "%",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "*",
                                        left: {
                                            type: "Identifier",
                                            name: "dom"
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 24,
                                            raw: "24"
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 24,
                                        raw: "24"
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "nd"
                        },
                        property: {
                            type: "Identifier",
                            name: "setSeconds"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "ms"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "nd"
                        },
                        property: {
                            type: "Identifier",
                            name: "setMinutes"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "mm"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "nd"
                        },
                        property: {
                            type: "Identifier",
                            name: "setHours"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "mh"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "nd"
                        },
                        property: {
                            type: "Identifier",
                            name: "setDate"
                        }
                    },
                    arguments: [
                        {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "Math"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "floor"
                                }
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "dom"
                                }
                            ]
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "nd"
                        },
                        property: {
                            type: "Identifier",
                            name: "setMonth"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "m"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "em"
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "md"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "cd"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "getDate"
                                }
                            },
                            arguments: []
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "IfStatement",
                test: {
                    type: "BinaryExpression",
                    operator: ">=",
                    left: {
                        type: "Identifier",
                        name: "cd"
                    },
                    right: {
                        type: "Identifier",
                        name: "nd"
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "nd"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "setMonth"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "nd"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "getMonth"
                                                }
                                            },
                                            arguments: []
                                        },
                                        right: {
                                            type: "Literal",
                                            value: 1,
                                            raw: "1"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "t1"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "cd"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "getTime"
                                }
                            },
                            arguments: []
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "t2"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "nd"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "getTime"
                                }
                            },
                            arguments: []
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "days"
                        },
                        init: {
                            type: "BinaryExpression",
                            operator: "/",
                            left: {
                                type: "BinaryExpression",
                                operator: "-",
                                left: {
                                    type: "Identifier",
                                    name: "t2"
                                },
                                right: {
                                    type: "Identifier",
                                    name: "t1"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: 86400000,
                                raw: "86400000"
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "Identifier",
                    name: "days"
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "dtbl"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "dex"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "de"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "dex"
                    },
                    right: {
                        type: "Identifier",
                        name: "dirty3"
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: []
                },
                alternate: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "IfStatement",
                            test: {
                                type: "UnaryExpression",
                                prefix: True,
                                operator: "!",
                                argument: {
                                    type: "Identifier",
                                    name: "dex"
                                }
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AwaitExpression",
                                            argument: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "sql"
                                                },
                                                arguments: [
                                                    {
                                                        type: "Identifier",
                                                        name: "dtbl_cs"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "Identifier",
                                                name: "dirty3"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: True,
                                                raw: "true"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "Identifier",
                    name: "dex"
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "fixtbl"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "sqlt1"
                        },
                        init: {
                            type: "Literal",
                            value: "CREATE TABLE IF NOT EXISTS tmpc (ts TIMESTAMP PRIMARY KEY NOT NULL,cash REAL,fs REAL,dx REAL)",
                            raw: "\"CREATE TABLE IF NOT EXISTS tmpc (ts TIMESTAMP PRIMARY KEY NOT NULL,cash REAL,fs REAL,dx REAL)\""
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "sql"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "sqlt1"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "sql"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "DELETE FROM tmpc",
                                raw: "\"DELETE FROM tmpc\""
                            }
                        ]
                    }
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "res"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "sql"
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "select * from currentc order by ts",
                                        raw: "\"select * from currentc order by ts\""
                                    }
                                ]
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ForStatement",
                init: {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "i"
                            },
                            init: {
                                type: "Literal",
                                value: 0,
                                raw: "0"
                            }
                        }
                    ],
                    kind: "let"
                },
                test: {
                    type: "BinaryExpression",
                    operator: "<",
                    left: {
                        type: "Identifier",
                        name: "i"
                    },
                    right: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "res"
                            },
                            property: {
                                type: "Identifier",
                                name: "rows"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "length"
                        }
                    }
                },
                update: {
                    type: "UpdateExpression",
                    operator: "++",
                    argument: {
                        type: "Identifier",
                        name: "i"
                    },
                    prefix: False
                },
                body: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "row"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "res"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "rows"
                                                }
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "item"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Identifier",
                                                name: "i"
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AwaitExpression",
                                argument: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "sql"
                                    },
                                    arguments: [
                                        {
                                            type: "Literal",
                                            value: "insert into tmpc (ts,cash,fs,dx) values (?,?,?,?)",
                                            raw: "\"insert into tmpc (ts,cash,fs,dx) values (?,?,?,?)\""
                                        },
                                        {
                                            type: "ArrayExpression",
                                            elements: [
                                                {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "NewExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "Date"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "row"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "ts"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "toISOString"
                                                        }
                                                    },
                                                    arguments: []
                                                },
                                                {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "row"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "cash"
                                                    }
                                                },
                                                {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "row"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "fs"
                                                    }
                                                },
                                                {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "row"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "dx"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "Exit"
                        }
                    },
                    arguments: []
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "ib"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "ft"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "ReadFile"
                                }
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "GetPath"
                                            }
                                        },
                                        arguments: []
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "/blog2.csv",
                                        raw: "\"/blog2.csv\""
                                    }
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "lna"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "ft"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "split"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "\n",
                                    raw: "\"\\n\""
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ForStatement",
                init: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "i"
                    },
                    right: {
                        type: "Literal",
                        value: 0,
                        raw: "0"
                    }
                },
                test: {
                    type: "BinaryExpression",
                    operator: "<",
                    left: {
                        type: "Identifier",
                        name: "i"
                    },
                    right: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lna"
                        },
                        property: {
                            type: "Identifier",
                            name: "length"
                        }
                    }
                },
                update: {
                    type: "UpdateExpression",
                    operator: "++",
                    argument: {
                        type: "Identifier",
                        name: "i"
                    },
                    prefix: False
                },
                body: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "f"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "MemberExpression",
                                                computed: True,
                                                object: {
                                                    type: "Identifier",
                                                    name: "lna"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "i"
                                                }
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "split"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Literal",
                                                value: ",",
                                                raw: "\",\""
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "tp"
                                    },
                                    init: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "MemberExpression",
                                                computed: True,
                                                object: {
                                                    type: "Identifier",
                                                    name: "f"
                                                },
                                                property: {
                                                    type: "Literal",
                                                    value: 1,
                                                    raw: "1"
                                                }
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "split"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Literal",
                                                value: ":",
                                                raw: "\":\""
                                            }
                                        ]
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "IfStatement",
                            test: {
                                type: "BinaryExpression",
                                operator: "<",
                                left: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "Number"
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: True,
                                            object: {
                                                type: "Identifier",
                                                name: "tp"
                                            },
                                            property: {
                                                type: "Literal",
                                                value: 0,
                                                raw: "0"
                                            }
                                        }
                                    ]
                                },
                                right: {
                                    type: "Literal",
                                    value: 10,
                                    raw: "10"
                                }
                            },
                            consequent: {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: True,
                                        object: {
                                            type: "Identifier",
                                            name: "tp"
                                        },
                                        property: {
                                            type: "Literal",
                                            value: 0,
                                            raw: "0"
                                        }
                                    },
                                    right: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: "0",
                                            raw: "\"0\""
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "Number"
                                            },
                                            arguments: [
                                                {
                                                    type: "MemberExpression",
                                                    computed: True,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "tp"
                                                    },
                                                    property: {
                                                        type: "Literal",
                                                        value: 0,
                                                        raw: "0"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "MemberExpression",
                                    computed: True,
                                    object: {
                                        type: "Identifier",
                                        name: "f"
                                    },
                                    property: {
                                        type: "Literal",
                                        value: 1,
                                        raw: "1"
                                    }
                                },
                                right: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "tp"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "join"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Literal",
                                            value: ":",
                                            raw: "\":\""
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "ts"
                                    },
                                    init: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "MemberExpression",
                                                computed: True,
                                                object: {
                                                    type: "Identifier",
                                                    name: "f"
                                                },
                                                property: {
                                                    type: "Literal",
                                                    value: 0,
                                                    raw: "0"
                                                }
                                            },
                                            right: {
                                                type: "Literal",
                                                value: " ",
                                                raw: "\" \""
                                            }
                                        },
                                        right: {
                                            type: "MemberExpression",
                                            computed: True,
                                            object: {
                                                type: "Identifier",
                                                name: "f"
                                            },
                                            property: {
                                                type: "Literal",
                                                value: 1,
                                                raw: "1"
                                            }
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "res"
                                    },
                                    init: {
                                        type: "AwaitExpression",
                                        argument: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "sql"
                                            },
                                            arguments: [
                                                {
                                                    type: "Literal",
                                                    value: "INSERT INTO currentc (ts, cash, fs, dx) VALUES (?,?,?,?)",
                                                    raw: "\"INSERT INTO currentc (ts, cash, fs, dx) VALUES (?,?,?,?)\""
                                                },
                                                {
                                                    type: "ArrayExpression",
                                                    elements: [
                                                        {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "NewExpression",
                                                                    callee: {
                                                                        type: "Identifier",
                                                                        name: "Date"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "ts"
                                                                        }
                                                                    ]
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "toISOString"
                                                                }
                                                            },
                                                            arguments: []
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: True,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "f"
                                                            },
                                                            property: {
                                                                type: "Literal",
                                                                value: 2,
                                                                raw: "2"
                                                            }
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: True,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "f"
                                                            },
                                                            property: {
                                                                type: "Literal",
                                                                value: 3,
                                                                raw: "3"
                                                            }
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: True,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "f"
                                                            },
                                                            property: {
                                                                type: "Literal",
                                                                value: 4,
                                                                raw: "4"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "Exit"
                        }
                    },
                    arguments: []
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "iee"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ReturnStatement",
                argument: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "tblexists"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "inc_exp",
                                raw: "\"inc_exp\""
                            }
                        ]
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "ietbl"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "iex"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "iee"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "iex"
                    },
                    right: {
                        type: "Identifier",
                        name: "dirty2"
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: []
                },
                alternate: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "IfStatement",
                            test: {
                                type: "UnaryExpression",
                                prefix: True,
                                operator: "!",
                                argument: {
                                    type: "Identifier",
                                    name: "iex"
                                }
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AwaitExpression",
                                            argument: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "sql"
                                                },
                                                arguments: [
                                                    {
                                                        type: "Identifier",
                                                        name: "ietbl_cs"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "Identifier",
                                                name: "dirty2"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: True,
                                                raw: "true"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "Identifier",
                    name: "iex"
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "inec_calc"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "res1"
                        },
                        init: {
                            type: "BinaryExpression",
                            operator: "-",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "davg"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "num"
                                }
                            },
                            right: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "dallow"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "num"
                                }
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "inec"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetText"
                        }
                    },
                    arguments: [
                        {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "ncs"
                            },
                            arguments: [
                                {
                                    type: "BinaryExpression",
                                    operator: "*",
                                    left: {
                                        type: "Identifier",
                                        name: "res1"
                                    },
                                    right: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "maxdl"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "num"
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "inec"
                        },
                        property: {
                            type: "Identifier",
                            name: "save"
                        }
                    },
                    arguments: []
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "loadnums"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "db"
                        },
                        property: {
                            type: "Identifier",
                            name: "transaction"
                        }
                    },
                    arguments: [
                        {
                            type: "FunctionExpression",
                            expression: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "tx"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "FunctionDeclaration",
                                        generator: False,
                                        expression: False,
                                        isAsync: True,
                                        id: {
                                            type: "Identifier",
                                            name: "load"
                                        },
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "mv"
                                            }
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AwaitExpression",
                                                        argument: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "NewExpression",
                                                                            callee: {
                                                                                type: "Identifier",
                                                                                name: "Promise"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "ArrowFunctionExpression",
                                                                                    generator: False,
                                                                                    isAsync: False,
                                                                                    params: [
                                                                                        {
                                                                                            type: "Identifier",
                                                                                            name: "resolve"
                                                                                        },
                                                                                        {
                                                                                            type: "Identifier",
                                                                                            name: "reject"
                                                                                        }
                                                                                    ],
                                                                                    body: {
                                                                                        type: "BlockStatement",
                                                                                        body: [
                                                                                            {
                                                                                                type: "ExpressionStatement",
                                                                                                expression: {
                                                                                                    type: "CallExpression",
                                                                                                    callee: {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "Identifier",
                                                                                                            name: "tx"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "executeSql"
                                                                                                        }
                                                                                                    },
                                                                                                    arguments: [
                                                                                                        {
                                                                                                            type: "Literal",
                                                                                                            value: "SELECT num FROM nums WHERE name=?",
                                                                                                            raw: "\"SELECT num FROM nums WHERE name=?\""
                                                                                                        },
                                                                                                        {
                                                                                                            type: "ArrayExpression",
                                                                                                            elements: [
                                                                                                                {
                                                                                                                    type: "MemberExpression",
                                                                                                                    computed: False,
                                                                                                                    object: {
                                                                                                                        type: "Identifier",
                                                                                                                        name: "mv"
                                                                                                                    },
                                                                                                                    property: {
                                                                                                                        type: "Identifier",
                                                                                                                        name: "name"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            type: "ArrowFunctionExpression",
                                                                                                            generator: False,
                                                                                                            isAsync: False,
                                                                                                            params: [
                                                                                                                {
                                                                                                                    type: "Identifier",
                                                                                                                    name: "t"
                                                                                                                },
                                                                                                                {
                                                                                                                    type: "Identifier",
                                                                                                                    name: "res"
                                                                                                                }
                                                                                                            ],
                                                                                                            body: {
                                                                                                                type: "BlockStatement",
                                                                                                                body: [
                                                                                                                    {
                                                                                                                        type: "ExpressionStatement",
                                                                                                                        expression: {
                                                                                                                            type: "CallExpression",
                                                                                                                            callee: {
                                                                                                                                type: "Identifier",
                                                                                                                                name: "resolve"
                                                                                                                            },
                                                                                                                            arguments: [
                                                                                                                                {
                                                                                                                                    type: "Identifier",
                                                                                                                                    name: "res"
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            expression: False
                                                                                                        },
                                                                                                        {
                                                                                                            type: "ArrowFunctionExpression",
                                                                                                            generator: False,
                                                                                                            isAsync: False,
                                                                                                            params: [
                                                                                                                {
                                                                                                                    type: "Identifier",
                                                                                                                    name: "t"
                                                                                                                },
                                                                                                                {
                                                                                                                    type: "Identifier",
                                                                                                                    name: "e"
                                                                                                                }
                                                                                                            ],
                                                                                                            body: {
                                                                                                                type: "BlockStatement",
                                                                                                                body: [
                                                                                                                    {
                                                                                                                        type: "ExpressionStatement",
                                                                                                                        expression: {
                                                                                                                            type: "CallExpression",
                                                                                                                            callee: {
                                                                                                                                type: "Identifier",
                                                                                                                                name: "reject"
                                                                                                                            },
                                                                                                                            arguments: [
                                                                                                                                {
                                                                                                                                    type: "Identifier",
                                                                                                                                    name: "e"
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            expression: False
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    expression: False
                                                                                }
                                                                            ]
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "catch"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "ArrowFunctionExpression",
                                                                            generator: False,
                                                                            isAsync: False,
                                                                            params: [
                                                                                {
                                                                                    type: "Identifier",
                                                                                    name: "err"
                                                                                }
                                                                            ],
                                                                            body: {
                                                                                type: "BlockStatement",
                                                                                body: [
                                                                                    {
                                                                                        type: "ExpressionStatement",
                                                                                        expression: {
                                                                                            type: "CallExpression",
                                                                                            callee: {
                                                                                                type: "Identifier",
                                                                                                name: "alert"
                                                                                            },
                                                                                            arguments: [
                                                                                                {
                                                                                                    type: "Identifier",
                                                                                                    name: "err"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            expression: False
                                                                        }
                                                                    ]
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "then"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "ArrowFunctionExpression",
                                                                    generator: False,
                                                                    isAsync: False,
                                                                    params: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "res"
                                                                        }
                                                                    ],
                                                                    body: {
                                                                        type: "BlockStatement",
                                                                        body: [
                                                                            {
                                                                                type: "IfStatement",
                                                                                test: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "!=",
                                                                                    left: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "res"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "rows"
                                                                                            }
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "length"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "Literal",
                                                                                        value: 1,
                                                                                        raw: "1"
                                                                                    }
                                                                                },
                                                                                consequent: {
                                                                                    type: "BlockStatement",
                                                                                    body: [
                                                                                        {
                                                                                            type: "ExpressionStatement",
                                                                                            expression: {
                                                                                                type: "CallExpression",
                                                                                                callee: {
                                                                                                    type: "Identifier",
                                                                                                    name: "alert"
                                                                                                },
                                                                                                arguments: [
                                                                                                    {
                                                                                                        type: "MemberExpression",
                                                                                                        computed: False,
                                                                                                        object: {
                                                                                                            type: "Identifier",
                                                                                                            name: "mv"
                                                                                                        },
                                                                                                        property: {
                                                                                                            type: "Identifier",
                                                                                                            name: "name"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                type: "ExpressionStatement",
                                                                                expression: {
                                                                                    type: "AssignmentExpression",
                                                                                    operator: "=",
                                                                                    left: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "mv"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "num"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "CallExpression",
                                                                                            callee: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "MemberExpression",
                                                                                                    computed: False,
                                                                                                    object: {
                                                                                                        type: "Identifier",
                                                                                                        name: "res"
                                                                                                    },
                                                                                                    property: {
                                                                                                        type: "Identifier",
                                                                                                        name: "rows"
                                                                                                    }
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "item"
                                                                                                }
                                                                                            },
                                                                                            arguments: [
                                                                                                {
                                                                                                    type: "Literal",
                                                                                                    value: 0,
                                                                                                    raw: "0"
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "num"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            },
                                                                            {
                                                                                type: "ExpressionStatement",
                                                                                expression: {
                                                                                    type: "CallExpression",
                                                                                    callee: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "MemberExpression",
                                                                                            computed: False,
                                                                                            object: {
                                                                                                type: "Identifier",
                                                                                                name: "mv"
                                                                                            },
                                                                                            property: {
                                                                                                type: "Identifier",
                                                                                                name: "te"
                                                                                            }
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "SetText"
                                                                                        }
                                                                                    },
                                                                                    arguments: [
                                                                                        {
                                                                                            type: "CallExpression",
                                                                                            callee: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "mv"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "toString"
                                                                                                }
                                                                                            },
                                                                                            arguments: []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    expression: False
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "cashb"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "fsb"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "dxb"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "davg"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "dallow"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "inec"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "dtot"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "load"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "tleft"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            generator: False
                        }
                    ]
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "log_balances"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "sql"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "INSERT INTO currentc (ts, cash, fs, dx) VALUES (?,?,?,?)",
                                raw: "\"INSERT INTO currentc (ts, cash, fs, dx) VALUES (?,?,?,?)\""
                            },
                            {
                                type: "ArrayExpression",
                                elements: [
                                    {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "NewExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "Date"
                                                },
                                                arguments: []
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "toISOString"
                                            }
                                        },
                                        arguments: []
                                    },
                                    {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "cashb"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "num"
                                        }
                                    },
                                    {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "fsb"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "num"
                                        }
                                    },
                                    {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "dxb"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "num"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dirty2"
                    },
                    right: {
                        type: "Literal",
                        value: True,
                        raw: "true"
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "UpdateExpression",
                    operator: "++",
                    argument: {
                        type: "Identifier",
                        name: "uc"
                    },
                    prefix: False
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "lts"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "res"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "sql"
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "SELECT ts FROM currentc ORDER BY ts DESC",
                                        raw: "\"SELECT ts FROM currentc ORDER BY ts DESC\""
                                    }
                                ]
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "MemberExpression",
                    computed: False,
                    object: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "res"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "rows"
                                }
                            },
                            property: {
                                type: "Identifier",
                                name: "item"
                            }
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "uc"
                            }
                        ]
                    },
                    property: {
                        type: "Identifier",
                        name: "ts"
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "maxdl_calc"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "cashd"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "dl"
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: 5,
                                    raw: "5"
                                },
                                {
                                    type: "Literal",
                                    value: 28,
                                    raw: "28"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "dxd"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "dl"
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: 5,
                                    raw: "5"
                                },
                                {
                                    type: "Literal",
                                    value: 3,
                                    raw: "3"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "maxdl"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetText"
                        }
                    },
                    arguments: [
                        {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "ncs"
                            },
                            arguments: [
                                {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "Math"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "max"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "cashd"
                                        },
                                        {
                                            type: "Identifier",
                                            name: "dxd"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "maxdl"
                        },
                        property: {
                            type: "Identifier",
                            name: "num"
                        }
                    },
                    right: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "ncs"
                        },
                        arguments: [
                            {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "Math"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "max"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Identifier",
                                        name: "cashd"
                                    },
                                    {
                                        type: "Identifier",
                                        name: "dxd"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "me"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ReturnStatement",
                argument: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "tblexists"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "monthly",
                                raw: "\"monthly\""
                            }
                        ]
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "mtbl"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "mex"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "me"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "mex"
                    },
                    right: {
                        type: "Identifier",
                        name: "dirty4"
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: []
                },
                alternate: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "IfStatement",
                            test: {
                                type: "UnaryExpression",
                                prefix: True,
                                operator: "!",
                                argument: {
                                    type: "Identifier",
                                    name: "mex"
                                }
                            },
                            consequent: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AwaitExpression",
                                            argument: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "sql"
                                                },
                                                arguments: [
                                                    {
                                                        type: "Identifier",
                                                        name: "mtbl_cs"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "Identifier",
                                                name: "dirty4"
                                            },
                                            right: {
                                                type: "Literal",
                                                value: True,
                                                raw: "true"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "Identifier",
                    name: "mex"
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "nc"
    },
    params: [
        {
            type: "Identifier",
            name: "d"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ReturnStatement",
                argument: {
                    type: "BinaryExpression",
                    operator: "/",
                    left: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "Math"
                            },
                            property: {
                                type: "Identifier",
                                name: "round"
                            }
                        },
                        arguments: [
                            {
                                type: "BinaryExpression",
                                operator: "*",
                                left: {
                                    type: "Identifier",
                                    name: "d"
                                },
                                right: {
                                    type: "Literal",
                                    value: 100,
                                    raw: "100"
                                }
                            }
                        ]
                    },
                    right: {
                        type: "Literal",
                        value: 100,
                        raw: "100"
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "ncs"
    },
    params: [
        {
            type: "Identifier",
            name: "d"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ReturnStatement",
                argument: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "nc"
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "d"
                                }
                            ]
                        },
                        property: {
                            type: "Identifier",
                            name: "toLocaleString"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "undefined"
                        },
                        {
                            type: "ObjectExpression",
                            properties: [
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "minimumFractionDigits"
                                    },
                                    computed: False,
                                    value: {
                                        type: "Literal",
                                        value: 2,
                                        raw: "2"
                                    },
                                    kind: "init",
                                    method: False,
                                    shorthand: False
                                },
                                {
                                    type: "Property",
                                    key: {
                                        type: "Identifier",
                                        name: "maximumFractionDigits"
                                    },
                                    computed: False,
                                    value: {
                                        type: "Literal",
                                        value: 2,
                                        raw: "2"
                                    },
                                    kind: "init",
                                    method: False,
                                    shorthand: False
                                }
                            ]
                        }
                    ]
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "OnStart"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "db"
                    },
                    right: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "app"
                            },
                            property: {
                                type: "Identifier",
                                name: "OpenDatabase"
                            }
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "dbfn"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "cashb"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "Cash",
                                raw: "\"Cash\""
                            },
                            {
                                type: "Literal",
                                value: "",
                                raw: "\"\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "fsb"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "FS",
                                raw: "\"FS\""
                            },
                            {
                                type: "Literal",
                                value: "",
                                raw: "\"\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dxb"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "DX",
                                raw: "\"DX\""
                            },
                            {
                                type: "Literal",
                                value: "",
                                raw: "\"\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "cashb"
                        },
                        property: {
                            type: "Identifier",
                            name: "isbal"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: True,
                        raw: "true"
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "fsb"
                        },
                        property: {
                            type: "Identifier",
                            name: "isbal"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: True,
                        raw: "true"
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "dxb"
                        },
                        property: {
                            type: "Identifier",
                            name: "isbal"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: True,
                        raw: "true"
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "davg"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "DAvgExp",
                                raw: "\"DAvgExp\""
                            },
                            {
                                type: "Literal",
                                value: "readonly,nokeyboard",
                                raw: "\"readonly,nokeyboard\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "davg"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetTextColor"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "turquoise",
                            raw: "\"turquoise\""
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dallow"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "DAllow",
                                raw: "\"DAllow\""
                            },
                            {
                                type: "Literal",
                                value: "readonly,nokeyboard",
                                raw: "\"readonly,nokeyboard\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "dallow"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetTextColor"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "fuchsia",
                            raw: "\"fuchsia\""
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "inec"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "INec",
                                raw: "\"INec\""
                            },
                            {
                                type: "Literal",
                                value: "readonly,nokeyboard",
                                raw: "\"readonly,nokeyboard\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "inec"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetTextColor"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "green",
                            raw: "\"green\""
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dtot"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "DTotExp",
                                raw: "\"DTotExp\""
                            },
                            {
                                type: "Literal",
                                value: "readonly,nokeyboard",
                                raw: "\"readonly,nokeyboard\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "dtot"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetTextColor"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "blue",
                            raw: "\"blue\""
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "tleft"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "TLeft",
                                raw: "\"TLeft\""
                            },
                            {
                                type: "Literal",
                                value: "readonly,nokeyboard",
                                raw: "\"readonly,nokeyboard\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "tleft"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetTextColor"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "red",
                            raw: "\"red\""
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "maxdl"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Mvar"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "MaxDL",
                                raw: "\"MaxDL\""
                            },
                            {
                                type: "Literal",
                                value: "readonly,nokeyboard",
                                raw: "\"readonly,nokeyboard\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "proxynums"
                    },
                    arguments: []
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "loadnums"
                    },
                    arguments: []
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "b1"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "CreateButton"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "Update",
                                    raw: "\"Update\""
                                },
                                {
                                    type: "Literal",
                                    value: 0.5,
                                    raw: "0.5"
                                },
                                {
                                    type: "Identifier",
                                    name: "bsz"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "b1"
                        },
                        property: {
                            type: "Identifier",
                            name: "SetOnTouch"
                        }
                    },
                    arguments: [
                        {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: True,
                            params: [],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AwaitExpression",
                                            argument: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "slow"
                                                },
                                                arguments: [
                                                    {
                                                        type: "ArrowFunctionExpression",
                                                        generator: False,
                                                        isAsync: True,
                                                        params: [],
                                                        body: {
                                                            type: "BlockStatement",
                                                            body: [
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "cashb"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "fsb"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "dxb"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "davg"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "dallow"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "inec"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "dtot"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "tleft"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "Identifier",
                                                                                    name: "maxdl"
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "save"
                                                                                }
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "AwaitExpression",
                                                                        argument: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "Identifier",
                                                                                name: "update_ietbl"
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    type: "ExpressionStatement",
                                                                    expression: {
                                                                        type: "CallExpression",
                                                                        callee: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "et"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "dispatchEvent"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                type: "NewExpression",
                                                                                callee: {
                                                                                    type: "Identifier",
                                                                                    name: "Event"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "Literal",
                                                                                        value: "update",
                                                                                        raw: "\"update\""
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        expression: False
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            expression: False
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "b2"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "CreateButton"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "Exit",
                                    raw: "\"Exit\""
                                },
                                {
                                    type: "Literal",
                                    value: 0.5,
                                    raw: "0.5"
                                },
                                {
                                    type: "Identifier",
                                    name: "bsz"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "b2ot"
                    },
                    right: {
                        type: "ArrowFunctionExpression",
                        generator: False,
                        isAsync: True,
                        params: [],
                        body: {
                            type: "BlockStatement",
                            body: [
                                {
                                    type: "IfStatement",
                                    test: {
                                        type: "BinaryExpression",
                                        operator: "!=",
                                        left: {
                                            type: "Identifier",
                                            name: "db"
                                        },
                                        right: {
                                            type: "Literal",
                                            raw: "null"
                                        }
                                    },
                                    consequent: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "db"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "Close"
                                                        }
                                                    },
                                                    arguments: []
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "db"
                                                    },
                                                    right: {
                                                        type: "Literal",
                                                        raw: "null"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    type: "ExpressionStatement",
                                    expression: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "Exit"
                                            }
                                        },
                                        arguments: []
                                    }
                                }
                            ]
                        },
                        expression: False
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "b2"
                        },
                        property: {
                            type: "Identifier",
                            name: "SetOnTouch"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "b2ot"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "window"
                        },
                        property: {
                            type: "Identifier",
                            name: "onclose"
                        }
                    },
                    right: {
                        type: "Identifier",
                        name: "b2ot"
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "rcb"
                    },
                    right: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "app"
                            },
                            property: {
                                type: "Identifier",
                                name: "CreateCheckBox"
                            }
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "Regen i/e tables",
                                raw: "\"Regen i/e tables\""
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "set_color"
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "rcb"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "ttl1"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "CreateText"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "Balance Log",
                                    raw: "\"Balance Log\""
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "ttl1"
                        },
                        property: {
                            type: "Identifier",
                            name: "SetTextSize"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 26,
                            raw: "26"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "lyo1"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "CreateLayout"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "linear",
                                    raw: "\"linear\""
                                },
                                {
                                    type: "Literal",
                                    value: "vertical, center",
                                    raw: "\"vertical, center\""
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo1"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "cashb"
                            },
                            property: {
                                type: "Identifier",
                                name: "lo"
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo1"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "dxb"
                            },
                            property: {
                                type: "Identifier",
                                name: "lo"
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo1"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "fsb"
                            },
                            property: {
                                type: "Identifier",
                                name: "lo"
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "set_color"
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "lyo1"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "lyo2"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "CreateLayout"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "linear",
                                    raw: "\"linear\""
                                },
                                {
                                    type: "Literal",
                                    value: "vertical,center",
                                    raw: "\"vertical,center\""
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "FunctionDeclaration",
                expression: False,
                isAsync: False,
                id: {
                    type: "Identifier",
                    name: "shuffleArray"
                },
                params: [
                    {
                        type: "Identifier",
                        name: "array"
                    }
                ],
                body: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ForStatement",
                            init: {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "i"
                                        },
                                        init: {
                                            type: "BinaryExpression",
                                            operator: "-",
                                            left: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "Identifier",
                                                    name: "array"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "length"
                                                }
                                            },
                                            right: {
                                                type: "Literal",
                                                value: 1,
                                                raw: "1"
                                            }
                                        }
                                    }
                                ],
                                kind: "let"
                            },
                            test: {
                                type: "BinaryExpression",
                                operator: ">",
                                left: {
                                    type: "Identifier",
                                    name: "i"
                                },
                                right: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                }
                            },
                            update: {
                                type: "UpdateExpression",
                                operator: "--",
                                argument: {
                                    type: "Identifier",
                                    name: "i"
                                },
                                prefix: False
                            },
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "VariableDeclaration",
                                        declarations: [
                                            {
                                                type: "VariableDeclarator",
                                                id: {
                                                    type: "Identifier",
                                                    name: "j"
                                                },
                                                init: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "Math"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "floor"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "BinaryExpression",
                                                            operator: "*",
                                                            left: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "Identifier",
                                                                        name: "Math"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "random"
                                                                    }
                                                                },
                                                                arguments: []
                                                            },
                                                            right: {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "Identifier",
                                                                    name: "i"
                                                                },
                                                                right: {
                                                                    type: "Literal",
                                                                    value: 1,
                                                                    raw: "1"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ],
                                        kind: "const"
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "AssignmentExpression",
                                            operator: "=",
                                            left: {
                                                type: "ArrayPattern",
                                                elements: [
                                                    {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "array"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "i"
                                                        }
                                                    },
                                                    {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "array"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "j"
                                                        }
                                                    }
                                                ]
                                            },
                                            right: {
                                                type: "ArrayExpression",
                                                elements: [
                                                    {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "array"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "j"
                                                        }
                                                    },
                                                    {
                                                        type: "MemberExpression",
                                                        computed: True,
                                                        object: {
                                                            type: "Identifier",
                                                            name: "array"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "i"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                generator: False
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "los"
                    },
                    right: {
                        type: "ArrayExpression",
                        elements: [
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "dallow"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "lo"
                                }
                            },
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "inec"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "lo"
                                }
                            },
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "tleft"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "lo"
                                }
                            },
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "davg"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "lo"
                                }
                            },
                            {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "dtot"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "lo"
                                }
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "shuffleArray"
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "los"
                        }
                    ]
                }
            },
            {
                type: "ForStatement",
                init: {
                    type: "VariableDeclaration",
                    declarations: [
                        {
                            type: "VariableDeclarator",
                            id: {
                                type: "Identifier",
                                name: "i"
                            },
                            init: {
                                type: "Literal",
                                value: 0,
                                raw: "0"
                            }
                        }
                    ],
                    kind: "var"
                },
                test: {
                    type: "BinaryExpression",
                    operator: "<",
                    left: {
                        type: "Identifier",
                        name: "i"
                    },
                    right: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "los"
                        },
                        property: {
                            type: "Identifier",
                            name: "length"
                        }
                    }
                },
                update: {
                    type: "UpdateExpression",
                    operator: "++",
                    argument: {
                        type: "Identifier",
                        name: "i"
                    },
                    prefix: False
                },
                body: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "lyo2"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "AddChild"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "MemberExpression",
                                        computed: True,
                                        object: {
                                            type: "Identifier",
                                            name: "los"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "i"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "set_color"
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "lyo2"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "app"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "CreateLayout"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: "linear",
                                    raw: "\"linear\""
                                },
                                {
                                    type: "Literal",
                                    value: "vertical, center",
                                    raw: "\"vertical, center\""
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "ttl1"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "lyo1"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "lyo2"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "b1"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "b2"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddChild"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "rcb"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "set_color"
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "lyo0"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "lyo0"
                        },
                        property: {
                            type: "Identifier",
                            name: "SetSize"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 1,
                            raw: "1"
                        },
                        {
                            type: "Literal",
                            value: 2,
                            raw: "2"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "AddLayout"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "lyo0"
                        }
                    ]
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "proxynums"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "cashb"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Proxy"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "cashb"
                            },
                            {
                                type: "Identifier",
                                name: "set_handler"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "fsb"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Proxy"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "fsb"
                            },
                            {
                                type: "Identifier",
                                name: "set_handler"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dxb"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Proxy"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "dxb"
                            },
                            {
                                type: "Identifier",
                                name: "set_handler"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "davg"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Proxy"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "davg"
                            },
                            {
                                type: "Identifier",
                                name: "set_handler"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "dallow"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Proxy"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "dallow"
                            },
                            {
                                type: "Identifier",
                                name: "set_handler"
                            }
                        ]
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "maxdl"
                    },
                    right: {
                        type: "NewExpression",
                        callee: {
                            type: "Identifier",
                            name: "Proxy"
                        },
                        arguments: [
                            {
                                type: "Identifier",
                                name: "maxdl"
                            },
                            {
                                type: "Identifier",
                                name: "set_handler"
                            }
                        ]
                    }
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "bal_handler"
                        },
                        init: {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "e"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "davg_dtot_calc"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "dallow_calc"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "tleft_calc"
                                            },
                                            arguments: []
                                        }
                                    }
                                ]
                            },
                            expression: False
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "cashb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "-changed",
                                raw: "\"-changed\""
                            }
                        },
                        {
                            type: "Identifier",
                            name: "bal_handler"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "dxb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "-changed",
                                raw: "\"-changed\""
                            }
                        },
                        {
                            type: "Identifier",
                            name: "bal_handler"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "fsb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "-changed",
                                raw: "\"-changed\""
                            }
                        },
                        {
                            type: "Identifier",
                            name: "bal_handler"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "update",
                            raw: "\"update\""
                        },
                        {
                            type: "Identifier",
                            name: "bal_handler"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "dallow"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "-changed",
                                raw: "\"-changed\""
                            }
                        },
                        {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "e"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "inec_calc"
                                            },
                                            arguments: []
                                        }
                                    }
                                ]
                            },
                            expression: False
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "davg"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "-changed",
                                raw: "\"-changed\""
                            }
                        },
                        {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "e"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "tleft_calc"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "inec_calc"
                                            },
                                            arguments: []
                                        }
                                    }
                                ]
                            },
                            expression: False
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "et"
                        },
                        property: {
                            type: "Identifier",
                            name: "addEventListener"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "maxdl"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            },
                            right: {
                                type: "Literal",
                                value: "-changed",
                                raw: "\"-changed\""
                            }
                        },
                        {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "e"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "dallow_calc"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        type: "ExpressionStatement",
                                        expression: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "inec_calc"
                                            },
                                            arguments: []
                                        }
                                    }
                                ]
                            },
                            expression: False
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "setInterval"
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "maxdl_calc"
                        },
                        {
                            type: "Literal",
                            value: 2000,
                            raw: "2000"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "Identifier",
                        name: "bal_handler"
                    },
                    arguments: []
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "SaveNumber"
    },
    params: [
        {
            type: "Identifier",
            name: "name"
        },
        {
            type: "Identifier",
            name: "num"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "sql"
                        },
                        arguments: [
                            {
                                type: "Literal",
                                value: "UPDATE nums SET (num,ts)=(?,?) WHERE name=?",
                                raw: "\"UPDATE nums SET (num,ts)=(?,?) WHERE name=?\""
                            },
                            {
                                type: "ArrayExpression",
                                elements: [
                                    {
                                        type: "Identifier",
                                        name: "num"
                                    },
                                    {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "NewExpression",
                                                callee: {
                                                    type: "Identifier",
                                                    name: "Date"
                                                },
                                                arguments: []
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "toISOString"
                                            }
                                        },
                                        arguments: []
                                    },
                                    {
                                        type: "Identifier",
                                        name: "name"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "set_color"
    },
    params: [
        {
            type: "Identifier",
            name: "o"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "TryStatement",
                block: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "o"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "SetBackColor"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "white",
                                        raw: "\"white\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                handler: {
                    type: "CatchClause",
                    param: {
                        type: "Identifier",
                        name: "e"
                    },
                    body: {
                        type: "BlockStatement",
                        body: []
                    }
                }
            },
            {
                type: "TryStatement",
                block: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "o"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "SetTextColor"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "black",
                                        raw: "\"black\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                handler: {
                    type: "CatchClause",
                    param: {
                        type: "Identifier",
                        name: "e"
                    },
                    body: {
                        type: "BlockStatement",
                        body: []
                    }
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "slow"
    },
    params: [
        {
            type: "Identifier",
            name: "f"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "ShowProgress"
                        }
                    },
                    arguments: []
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "Identifier",
                            name: "f"
                        },
                        arguments: []
                    }
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "HideProgress"
                        }
                    },
                    arguments: []
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "sql"
    },
    params: [
        {
            type: "Identifier",
            name: "stmnt"
        },
        {
            type: "Identifier",
            name: "dat"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "IfStatement",
                test: {
                    type: "BinaryExpression",
                    operator: "==",
                    left: {
                        type: "Identifier",
                        name: "db"
                    },
                    right: {
                        type: "Literal",
                        raw: "null"
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "db"
                                },
                                right: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "Identifier",
                                            name: "app"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "OpenDatabase"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "dbfn"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "db"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "ExecuteSql"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "PRAGMA synchronous = OFF",
                                        raw: "\"PRAGMA synchronous = OFF\""
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "AwaitExpression",
                    argument: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "NewExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "Promise"
                                },
                                arguments: [
                                    {
                                        type: "ArrowFunctionExpression",
                                        generator: False,
                                        isAsync: False,
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "res"
                                            },
                                            {
                                                type: "Identifier",
                                                name: "err"
                                            }
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "db"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "ExecuteSql"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Identifier",
                                                                name: "stmnt"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "dat"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "res"
                                                            },
                                                            {
                                                                type: "Identifier",
                                                                name: "err"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        expression: False
                                    }
                                ]
                            },
                            property: {
                                type: "Identifier",
                                name: "catch"
                            }
                        },
                        arguments: [
                            {
                                type: "ArrowFunctionExpression",
                                generator: False,
                                isAsync: False,
                                params: [
                                    {
                                        type: "Identifier",
                                        name: "err"
                                    }
                                ],
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "app"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "Alert"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "Identifier",
                                                                        name: "err"
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: ",",
                                                                        raw: "\",\""
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "Identifier",
                                                                    name: "stmnt"
                                                                }
                                                            },
                                                            right: {
                                                                type: "Literal",
                                                                value: ",",
                                                                raw: "\",\""
                                                            }
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "dat"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                expression: False
                            }
                        ]
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "tblexists"
    },
    params: [
        {
            type: "Identifier",
            name: "nm"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "res"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "sql"
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: "SELECT COUNT() AS cnt FROM sqlite_master WHERE type='table' AND name=?",
                                        raw: "\"SELECT COUNT() AS cnt FROM sqlite_master WHERE type='table' AND name=?\""
                                    },
                                    {
                                        type: "ArrayExpression",
                                        elements: [
                                            {
                                                type: "Identifier",
                                                name: "nm"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "BinaryExpression",
                    operator: ">",
                    left: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "res"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "rows"
                                    }
                                },
                                property: {
                                    type: "Identifier",
                                    name: "item"
                                }
                            },
                            arguments: [
                                {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                }
                            ]
                        },
                        property: {
                            type: "Identifier",
                            name: "cnt"
                        }
                    },
                    right: {
                        type: "Literal",
                        value: 0,
                        raw: "0"
                    }
                }
            }
        ]
    }
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "teot"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "v"
                        },
                        init: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "ThisExpression"
                            },
                            property: {
                                type: "Identifier",
                                name: "mvar"
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "ShowPopup"
                        }
                    },
                    arguments: [
                        {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "Literal",
                                value: " v.name: ",
                                raw: "\" v.name: \""
                            },
                            right: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "v"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "name"
                                }
                            }
                        }
                    ]
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "tleft_calc"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "tf"
                        },
                        init: {
                            type: "BinaryExpression",
                            operator: "+",
                            left: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "cashb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "num"
                                }
                            },
                            right: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "dxb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "num"
                                }
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "tl"
                        },
                        init: {
                            type: "BinaryExpression",
                            operator: "/",
                            left: {
                                type: "Identifier",
                                name: "tf"
                            },
                            right: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "davg"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "num"
                                }
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "tmp"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "ncs"
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "tl"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "tleft"
                            },
                            property: {
                                type: "Identifier",
                                name: "te"
                            }
                        },
                        property: {
                            type: "Identifier",
                            name: "SetText"
                        }
                    },
                    arguments: [
                        {
                            type: "Identifier",
                            name: "tmp"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "tleft"
                        },
                        property: {
                            type: "Identifier",
                            name: "save"
                        }
                    },
                    arguments: []
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "txtp"
    },
    params: [
        {
            type: "Identifier",
            name: "txt"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ReturnStatement",
                argument: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "CallExpression",
                            callee: {
                                type: "Identifier",
                                name: "txtpa"
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "txt"
                                }
                            ]
                        },
                        property: {
                            type: "Identifier",
                            name: "reduce"
                        }
                    },
                    arguments: [
                        {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "a"
                                },
                                {
                                    type: "Identifier",
                                    name: "c"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ReturnStatement",
                                        argument: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Identifier",
                                                name: "a"
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "c"
                                            }
                                        }
                                    }
                                ]
                            },
                            expression: False
                        },
                        {
                            type: "Literal",
                            value: 0,
                            raw: "0"
                        }
                    ]
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    expression: False,
    isAsync: False,
    id: {
        type: "Identifier",
        name: "txtpa"
    },
    params: [
        {
            type: "Identifier",
            name: "txt"
        }
    ],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "re"
                        },
                        init: {
                            type: "Literal",
                            value: re.compile('([+\\-]?\\s*([0-9,]*)([\\.][0-9]*)?)'),
                            raw: "/([+\\-]?\\s*([0-9,]*)([\\.][0-9]*)?)/g",
                            regex: {
                                pattern: "([+\\-]?\\s*([0-9,]*)([\\.][0-9]*)?)",
                                flags: "g"
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "res1"
                        },
                        init: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "txt"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "match"
                                }
                            },
                            arguments: [
                                {
                                    type: "Identifier",
                                    name: "re"
                                }
                            ]
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "IfStatement",
                test: {
                    type: "BinaryExpression",
                    operator: "==",
                    left: {
                        type: "Identifier",
                        name: "res1"
                    },
                    right: {
                        type: "Literal",
                        raw: "null"
                    }
                },
                consequent: {
                    type: "ExpressionStatement",
                    expression: {
                        type: "AssignmentExpression",
                        operator: "=",
                        left: {
                            type: "Identifier",
                            name: "res1"
                        },
                        right: {
                            type: "ArrayExpression",
                            elements: []
                        }
                    }
                }
            },
            {
                type: "ReturnStatement",
                argument: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "res1"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "map"
                                }
                            },
                            arguments: [
                                {
                                    type: "ArrowFunctionExpression",
                                    generator: False,
                                    isAsync: False,
                                    params: [
                                        {
                                            type: "Identifier",
                                            name: "s"
                                        }
                                    ],
                                    body: {
                                        type: "BlockStatement",
                                        body: [
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "s"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "s"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "replace"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: re.compile('\\s+'),
                                                                raw: "/\\s+/g",
                                                                regex: {
                                                                    pattern: "\\s+",
                                                                    flags: "g"
                                                                }
                                                            },
                                                            {
                                                                type: "Literal",
                                                                value: "",
                                                                raw: "\"\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AssignmentExpression",
                                                    operator: "=",
                                                    left: {
                                                        type: "Identifier",
                                                        name: "s"
                                                    },
                                                    right: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "s"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "replace"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "Literal",
                                                                value: re.compile(','),
                                                                raw: "/,/g",
                                                                regex: {
                                                                    pattern: ",",
                                                                    flags: "g"
                                                                }
                                                            },
                                                            {
                                                                type: "Literal",
                                                                value: "",
                                                                raw: "\"\""
                                                            }
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                type: "ReturnStatement",
                                                argument: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "parseFloat"
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "s"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    expression: False
                                }
                            ]
                        },
                        property: {
                            type: "Identifier",
                            name: "filter"
                        }
                    },
                    arguments: [
                        {
                            type: "ArrowFunctionExpression",
                            generator: False,
                            isAsync: False,
                            params: [
                                {
                                    type: "Identifier",
                                    name: "n"
                                }
                            ],
                            body: {
                                type: "BlockStatement",
                                body: [
                                    {
                                        type: "ReturnStatement",
                                        argument: {
                                            type: "LogicalExpression",
                                            operator: "&&",
                                            left: {
                                                type: "BinaryExpression",
                                                operator: "!=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "n"
                                                },
                                                right: {
                                                    type: "Literal",
                                                    raw: "null"
                                                }
                                            },
                                            right: {
                                                type: "CallExpression",
                                                callee: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "Identifier",
                                                        name: "Number"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "isFinite"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        type: "Identifier",
                                                        name: "n"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            expression: False
                        }
                    ]
                }
            }
        ]
    },
    generator: False
}
{
    type: "FunctionDeclaration",
    generator: False,
    expression: False,
    isAsync: True,
    id: {
        type: "Identifier",
        name: "update_ietbl"
    },
    params: [],
    body: {
        type: "BlockStatement",
        body: [
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "ShowProgressBar"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: "updating tables...",
                            raw: "\"updating tables...\""
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "pd"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "lts"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "iex"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "ietbl"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "wh"
                        },
                        init: {
                            type: "Literal",
                            value: "",
                            raw: "\"\""
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "iex"
                    },
                    right: {
                        type: "UnaryExpression",
                        prefix: True,
                        operator: "!",
                        argument: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "rcb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "GetChecked"
                                }
                            },
                            arguments: []
                        }
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "wh"
                                },
                                right: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: " WHERE ts>='",
                                            raw: "\" WHERE ts>='\""
                                        },
                                        right: {
                                            type: "Identifier",
                                            name: "pd"
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "'",
                                        raw: "\"'\""
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "||",
                    left: {
                        type: "Identifier",
                        name: "dirty2"
                    },
                    right: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "rcb"
                            },
                            property: {
                                type: "Identifier",
                                name: "GetChecked"
                            }
                        },
                        arguments: []
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "ss"
                                    },
                                    init: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: "SELECT ts, cash, fs, dx FROM currentc",
                                                raw: "\"SELECT ts, cash, fs, dx FROM currentc\""
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "wh"
                                            }
                                        },
                                        right: {
                                            type: "Literal",
                                            value: " ORDER BY ts",
                                            raw: "\" ORDER BY ts\""
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "res"
                                    },
                                    init: {
                                        type: "AwaitExpression",
                                        argument: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "sql"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "ss"
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "rc"
                                    },
                                    init: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "res"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "rows"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "length"
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "j"
                                    },
                                    init: {
                                        type: "Literal",
                                        value: 0,
                                        raw: "0"
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "i"
                                    },
                                    init: {
                                        type: "Literal",
                                        value: 1,
                                        raw: "1"
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "db"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "transaction"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "FunctionExpression",
                                        generator: False,
                                        expression: False,
                                        isAsync: True,
                                        params: [
                                            {
                                                type: "Identifier",
                                                name: "tx"
                                            }
                                        ],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "ForStatement",
                                                    test: {
                                                        type: "BinaryExpression",
                                                        operator: "<",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "i"
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "rc"
                                                        }
                                                    },
                                                    update: {
                                                        type: "UpdateExpression",
                                                        operator: "++",
                                                        argument: {
                                                            type: "Identifier",
                                                            name: "i"
                                                        },
                                                        prefix: False
                                                    },
                                                    body: {
                                                        type: "BlockStatement",
                                                        body: [
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "pr"
                                                                        },
                                                                        init: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "res"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "rows"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "item"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Identifier",
                                                                                    name: "j"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "cr"
                                                                        },
                                                                        init: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "Identifier",
                                                                                        name: "res"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "rows"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "item"
                                                                                }
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "Identifier",
                                                                                    name: "i"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "bts"
                                                                        },
                                                                        init: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "pr"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "ts"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "ets"
                                                                        },
                                                                        init: {
                                                                            type: "MemberExpression",
                                                                            computed: False,
                                                                            object: {
                                                                                type: "Identifier",
                                                                                name: "cr"
                                                                            },
                                                                            property: {
                                                                                type: "Identifier",
                                                                                name: "ts"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "cash_diff"
                                                                        },
                                                                        init: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "Identifier",
                                                                                name: "nc"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "cr"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "cash"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "pr"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "cash"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "fs_diff"
                                                                        },
                                                                        init: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "Identifier",
                                                                                name: "nc"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "cr"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "fs"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "pr"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "fs"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "dx_diff"
                                                                        },
                                                                        init: {
                                                                            type: "CallExpression",
                                                                            callee: {
                                                                                type: "Identifier",
                                                                                name: "nc"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "-",
                                                                                    left: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "cr"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "dx"
                                                                                        }
                                                                                    },
                                                                                    right: {
                                                                                        type: "MemberExpression",
                                                                                        computed: False,
                                                                                        object: {
                                                                                            type: "Identifier",
                                                                                            name: "pr"
                                                                                        },
                                                                                        property: {
                                                                                            type: "Identifier",
                                                                                            name: "dx"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "cash_recd"
                                                                        },
                                                                        init: {
                                                                            type: "ConditionalExpression",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: ">",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "cash_diff"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 0,
                                                                                    raw: "0"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "Identifier",
                                                                                name: "cash_diff"
                                                                            },
                                                                            alternate: {
                                                                                type: "Literal",
                                                                                raw: "null"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "fs_recd"
                                                                        },
                                                                        init: {
                                                                            type: "ConditionalExpression",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: ">",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "fs_diff"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 0,
                                                                                    raw: "0"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "Identifier",
                                                                                name: "fs_diff"
                                                                            },
                                                                            alternate: {
                                                                                type: "Literal",
                                                                                raw: "null"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "dx_recd"
                                                                        },
                                                                        init: {
                                                                            type: "ConditionalExpression",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: ">",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "dx_diff"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 0,
                                                                                    raw: "0"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "Identifier",
                                                                                name: "dx_diff"
                                                                            },
                                                                            alternate: {
                                                                                type: "Literal",
                                                                                raw: "null"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "cash_spent"
                                                                        },
                                                                        init: {
                                                                            type: "ConditionalExpression",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: "<",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "cash_diff"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 0,
                                                                                    raw: "0"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "Identifier",
                                                                                    name: "nc"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "UnaryExpression",
                                                                                        prefix: True,
                                                                                        operator: "-",
                                                                                        argument: {
                                                                                            type: "Identifier",
                                                                                            name: "cash_diff"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            alternate: {
                                                                                type: "Literal",
                                                                                raw: "null"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "fs_spent"
                                                                        },
                                                                        init: {
                                                                            type: "ConditionalExpression",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: "<",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "fs_diff"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 0,
                                                                                    raw: "0"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "Identifier",
                                                                                    name: "nc"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "UnaryExpression",
                                                                                        prefix: True,
                                                                                        operator: "-",
                                                                                        argument: {
                                                                                            type: "Identifier",
                                                                                            name: "fs_diff"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            alternate: {
                                                                                type: "Literal",
                                                                                raw: "null"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "VariableDeclaration",
                                                                declarations: [
                                                                    {
                                                                        type: "VariableDeclarator",
                                                                        id: {
                                                                            type: "Identifier",
                                                                            name: "dx_spent"
                                                                        },
                                                                        init: {
                                                                            type: "ConditionalExpression",
                                                                            test: {
                                                                                type: "BinaryExpression",
                                                                                operator: "<",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "dx_diff"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 0,
                                                                                    raw: "0"
                                                                                }
                                                                            },
                                                                            consequent: {
                                                                                type: "CallExpression",
                                                                                callee: {
                                                                                    type: "Identifier",
                                                                                    name: "nc"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        type: "UnaryExpression",
                                                                                        prefix: True,
                                                                                        operator: "-",
                                                                                        argument: {
                                                                                            type: "Identifier",
                                                                                            name: "dx_diff"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            alternate: {
                                                                                type: "Literal",
                                                                                raw: "null"
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                kind: "let"
                                                            },
                                                            {
                                                                type: "IfStatement",
                                                                test: {
                                                                    type: "LogicalExpression",
                                                                    operator: "||",
                                                                    left: {
                                                                        type: "LogicalExpression",
                                                                        operator: "||",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "!=",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "cash_diff"
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: 0,
                                                                                raw: "0"
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "BinaryExpression",
                                                                            operator: "!=",
                                                                            left: {
                                                                                type: "Identifier",
                                                                                name: "fs_diff"
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: 0,
                                                                                raw: "0"
                                                                            }
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "BinaryExpression",
                                                                        operator: "!=",
                                                                        left: {
                                                                            type: "Identifier",
                                                                            name: "dx_diff"
                                                                        },
                                                                        right: {
                                                                            type: "Literal",
                                                                            value: 0,
                                                                            raw: "0"
                                                                        }
                                                                    }
                                                                },
                                                                consequent: {
                                                                    type: "BlockStatement",
                                                                    body: [
                                                                        {
                                                                            type: "VariableDeclaration",
                                                                            declarations: [
                                                                                {
                                                                                    type: "VariableDeclarator",
                                                                                    id: {
                                                                                        type: "Identifier",
                                                                                        name: "res2"
                                                                                    },
                                                                                    init: {
                                                                                        type: "AwaitExpression",
                                                                                        argument: {
                                                                                            type: "CallExpression",
                                                                                            callee: {
                                                                                                type: "MemberExpression",
                                                                                                computed: False,
                                                                                                object: {
                                                                                                    type: "Identifier",
                                                                                                    name: "tx"
                                                                                                },
                                                                                                property: {
                                                                                                    type: "Identifier",
                                                                                                    name: "executeSql"
                                                                                                }
                                                                                            },
                                                                                            arguments: [
                                                                                                {
                                                                                                    type: "Literal",
                                                                                                    value: "INSERT OR REPLACE INTO inc_exp (bts, ets, cash_recd, fs_recd, dx_recd, cash_spent, fs_spent, dx_spent) VALUES (?,?,?,?,?,?,?,?)",
                                                                                                    raw: "\"INSERT OR REPLACE INTO inc_exp (bts, ets, cash_recd, fs_recd, dx_recd, cash_spent, fs_spent, dx_spent) VALUES (?,?,?,?,?,?,?,?)\""
                                                                                                },
                                                                                                {
                                                                                                    type: "ArrayExpression",
                                                                                                    elements: [
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "bts"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "ets"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "cash_recd"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "fs_recd"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "dx_recd"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "cash_spent"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "fs_spent"
                                                                                                        },
                                                                                                        {
                                                                                                            type: "Identifier",
                                                                                                            name: "dx_spent"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ],
                                                                            kind: "let"
                                                                        },
                                                                        {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "AssignmentExpression",
                                                                                operator: "=",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "j"
                                                                                },
                                                                                right: {
                                                                                    type: "Identifier",
                                                                                    name: "i"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            type: "ExpressionStatement",
                                                                            expression: {
                                                                                type: "AssignmentExpression",
                                                                                operator: "=",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "dirty3"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: True,
                                                                                    raw: "true"
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "UpdateExpression",
                                                                    operator: "--",
                                                                    argument: {
                                                                        type: "Identifier",
                                                                        name: "uc"
                                                                    },
                                                                    prefix: False
                                                                }
                                                            },
                                                            {
                                                                type: "ExpressionStatement",
                                                                expression: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "MemberExpression",
                                                                        computed: False,
                                                                        object: {
                                                                            type: "Identifier",
                                                                            name: "app"
                                                                        },
                                                                        property: {
                                                                            type: "Identifier",
                                                                            name: "UpdateProgressBar"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "BinaryExpression",
                                                                            operator: "/",
                                                                            left: {
                                                                                type: "BinaryExpression",
                                                                                operator: "*",
                                                                                left: {
                                                                                    type: "Identifier",
                                                                                    name: "i"
                                                                                },
                                                                                right: {
                                                                                    type: "Literal",
                                                                                    value: 80,
                                                                                    raw: "80"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Identifier",
                                                                                name: "rc"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "dirty2"
                                },
                                right: {
                                    type: "Literal",
                                    value: False,
                                    raw: "false"
                                }
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "UpdateProgressBar"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 80,
                            raw: "80"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "dex"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "dtbl"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "wh"
                    },
                    right: {
                        type: "Literal",
                        value: "",
                        raw: "\"\""
                    }
                }
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "dex"
                    },
                    right: {
                        type: "UnaryExpression",
                        prefix: True,
                        operator: "!",
                        argument: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "rcb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "GetChecked"
                                }
                            },
                            arguments: []
                        }
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "wh"
                                },
                                right: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: " WHERE substr(datetime(ets,'localtime'), 1, 10)>='",
                                            raw: "\" WHERE substr(datetime(ets,'localtime'), 1, 10)>='\""
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "NewExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "Date"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Identifier",
                                                                    name: "pd"
                                                                }
                                                            ]
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "toLocaleDateString"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "fr-CA",
                                                            raw: "\"fr-CA\""
                                                        }
                                                    ]
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "substring"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Literal",
                                                    value: 0,
                                                    raw: "0"
                                                },
                                                {
                                                    type: "Literal",
                                                    value: 10,
                                                    raw: "10"
                                                }
                                            ]
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "'",
                                        raw: "\"'\""
                                    }
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "app"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "ShowPopup"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Identifier",
                                        name: "wh"
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "||",
                    left: {
                        type: "Identifier",
                        name: "dirty3"
                    },
                    right: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "rcb"
                            },
                            property: {
                                type: "Identifier",
                                name: "GetChecked"
                            }
                        },
                        arguments: []
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "sst"
                                    },
                                    init: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: " SELECT substr(datetime(ets,'localtime'), 1, 10) AS ts, SUM(cash_recd) AS cash_recd, SUM(fs_recd) AS fs_recd, SUM(dx_recd) AS dx_recd, SUM(cash_spent) AS cash_spent, SUM(fs_spent) AS fs_spent, SUM(dx_spent) AS dx_spent FROM inc_exp",
                                                raw: "\" SELECT substr(datetime(ets,'localtime'), 1, 10) AS ts, SUM(cash_recd) AS cash_recd, SUM(fs_recd) AS fs_recd, SUM(dx_recd) AS dx_recd, SUM(cash_spent) AS cash_spent, SUM(fs_spent) AS fs_spent, SUM(dx_spent) AS dx_spent FROM inc_exp\""
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "wh"
                                            }
                                        },
                                        right: {
                                            type: "Literal",
                                            value: " GROUP BY substr(datetime(ets,'localtime'), 1, 10)",
                                            raw: "\" GROUP BY substr(datetime(ets,'localtime'), 1, 10)\""
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AwaitExpression",
                                argument: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "sql"
                                    },
                                    arguments: [
                                        {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: "INSERT OR REPLACE INTO daily",
                                                raw: "\"INSERT OR REPLACE INTO daily\""
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "sst"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "dirty3"
                                },
                                right: {
                                    type: "Literal",
                                    value: False,
                                    raw: "false"
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "dirty4"
                                },
                                right: {
                                    type: "Literal",
                                    value: True,
                                    raw: "true"
                                }
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "UpdateProgressBar"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 90,
                            raw: "90"
                        }
                    ]
                }
            },
            {
                type: "VariableDeclaration",
                declarations: [
                    {
                        type: "VariableDeclarator",
                        id: {
                            type: "Identifier",
                            name: "mex"
                        },
                        init: {
                            type: "AwaitExpression",
                            argument: {
                                type: "CallExpression",
                                callee: {
                                    type: "Identifier",
                                    name: "mtbl"
                                },
                                arguments: []
                            }
                        }
                    }
                ],
                kind: "let"
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "AssignmentExpression",
                    operator: "=",
                    left: {
                        type: "Identifier",
                        name: "wh"
                    },
                    right: {
                        type: "Literal",
                        value: "",
                        raw: "\"\""
                    }
                }
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "&&",
                    left: {
                        type: "Identifier",
                        name: "mex"
                    },
                    right: {
                        type: "UnaryExpression",
                        prefix: True,
                        operator: "!",
                        argument: {
                            type: "CallExpression",
                            callee: {
                                type: "MemberExpression",
                                computed: False,
                                object: {
                                    type: "Identifier",
                                    name: "rcb"
                                },
                                property: {
                                    type: "Identifier",
                                    name: "GetChecked"
                                }
                            },
                            arguments: []
                        }
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "wh"
                                },
                                right: {
                                    type: "BinaryExpression",
                                    operator: "+",
                                    left: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "Literal",
                                            value: " WHERE substr(datetime(ets,'localtime'), 1, 7)>='",
                                            raw: "\" WHERE substr(datetime(ets,'localtime'), 1, 7)>='\""
                                        },
                                        right: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "NewExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "Date"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Identifier",
                                                                    name: "pd"
                                                                }
                                                            ]
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "toLocaleDateString"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Literal",
                                                            value: "fr-CA",
                                                            raw: "\"fr-CA\""
                                                        }
                                                    ]
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "substring"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    type: "Literal",
                                                    value: 0,
                                                    raw: "0"
                                                },
                                                {
                                                    type: "Literal",
                                                    value: 7,
                                                    raw: "7"
                                                }
                                            ]
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: "'",
                                        raw: "\"'\""
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            {
                type: "IfStatement",
                test: {
                    type: "LogicalExpression",
                    operator: "||",
                    left: {
                        type: "Identifier",
                        name: "dirty4"
                    },
                    right: {
                        type: "CallExpression",
                        callee: {
                            type: "MemberExpression",
                            computed: False,
                            object: {
                                type: "Identifier",
                                name: "rcb"
                            },
                            property: {
                                type: "Identifier",
                                name: "GetChecked"
                            }
                        },
                        arguments: []
                    }
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "VariableDeclaration",
                            declarations: [
                                {
                                    type: "VariableDeclarator",
                                    id: {
                                        type: "Identifier",
                                        name: "sst"
                                    },
                                    init: {
                                        type: "BinaryExpression",
                                        operator: "+",
                                        left: {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: " SELECT substr(datetime(ets,'localtime'), 1, 7) AS ts, SUM(cash_recd) AS cash_recd, SUM(fs_recd) AS fs_recd, SUM(dx_recd) AS dx_recd, SUM(cash_spent) AS cash_spent, SUM(fs_spent) AS fs_spent, SUM(dx_spent) AS dx_spent FROM inc_exp",
                                                raw: "\" SELECT substr(datetime(ets,'localtime'), 1, 7) AS ts, SUM(cash_recd) AS cash_recd, SUM(fs_recd) AS fs_recd, SUM(dx_recd) AS dx_recd, SUM(cash_spent) AS cash_spent, SUM(fs_spent) AS fs_spent, SUM(dx_spent) AS dx_spent FROM inc_exp\""
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "wh"
                                            }
                                        },
                                        right: {
                                            type: "Literal",
                                            value: " GROUP BY substr(datetime(ets,'localtime'), 1, 7)",
                                            raw: "\" GROUP BY substr(datetime(ets,'localtime'), 1, 7)\""
                                        }
                                    }
                                }
                            ],
                            kind: "let"
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AwaitExpression",
                                argument: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "sql"
                                    },
                                    arguments: [
                                        {
                                            type: "BinaryExpression",
                                            operator: "+",
                                            left: {
                                                type: "Literal",
                                                value: "INSERT OR REPLACE INTO monthly",
                                                raw: "\"INSERT OR REPLACE INTO monthly\""
                                            },
                                            right: {
                                                type: "Identifier",
                                                name: "sst"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "dirty4"
                                },
                                right: {
                                    type: "Literal",
                                    value: False,
                                    raw: "false"
                                }
                            }
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "UpdateProgressBar"
                        }
                    },
                    arguments: [
                        {
                            type: "Literal",
                            value: 100,
                            raw: "100"
                        }
                    ]
                }
            },
            {
                type: "ExpressionStatement",
                expression: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "app"
                        },
                        property: {
                            type: "Identifier",
                            name: "HideProgressBar"
                        }
                    },
                    arguments: []
                }
            },
            {
                type: "IfStatement",
                test: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        computed: False,
                        object: {
                            type: "Identifier",
                            name: "rcb"
                        },
                        property: {
                            type: "Identifier",
                            name: "GetChecked"
                        }
                    },
                    arguments: []
                },
                consequent: {
                    type: "BlockStatement",
                    body: [
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "AssignmentExpression",
                                operator: "=",
                                left: {
                                    type: "Identifier",
                                    name: "uc"
                                },
                                right: {
                                    type: "Literal",
                                    value: 0,
                                    raw: "0"
                                }
                            }
                        },
                        {
                            type: "ExpressionStatement",
                            expression: {
                                type: "CallExpression",
                                callee: {
                                    type: "MemberExpression",
                                    computed: False,
                                    object: {
                                        type: "Identifier",
                                        name: "rcb"
                                    },
                                    property: {
                                        type: "Identifier",
                                        name: "SetChecked"
                                    }
                                },
                                arguments: [
                                    {
                                        type: "Literal",
                                        value: False,
                                        raw: "false"
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        ]
    }
}
{
    type: "ClassDeclaration",
    id: {
        type: "Identifier",
        name: "Mvar"
    },
    body: {
        type: "ClassBody",
        body: [
            {
                type: "MethodDefinition",
                key: {
                    type: "Identifier",
                    name: "constructor"
                },
                computed: False,
                value: {
                    type: "FunctionExpression",
                    expression: False,
                    isAsync: False,
                    params: [
                        {
                            type: "Identifier",
                            name: "n"
                        },
                        {
                            type: "Identifier",
                            name: "ne"
                        }
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "num"
                                        }
                                    },
                                    right: {
                                        type: "Literal",
                                        value: 0,
                                        raw: "0"
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "te"
                                        }
                                    },
                                    right: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "CreateTextEdit"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Literal",
                                                value: "",
                                                raw: "\"\""
                                            },
                                            {
                                                type: "Literal",
                                                value: 0.5,
                                                raw: "0.5"
                                            },
                                            {
                                                type: "Identifier",
                                                name: "tesz"
                                            },
                                            {
                                                type: "BinaryExpression",
                                                operator: "+",
                                                left: {
                                                    type: "Literal",
                                                    value: "singleline",
                                                    raw: "\"singleline\""
                                                },
                                                right: {
                                                    type: "ConditionalExpression",
                                                    test: {
                                                        type: "BinaryExpression",
                                                        operator: "!==",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "ne"
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: "",
                                                            raw: "\"\""
                                                        }
                                                    },
                                                    consequent: {
                                                        type: "BinaryExpression",
                                                        operator: "+",
                                                        left: {
                                                            type: "Literal",
                                                            value: ",",
                                                            raw: "\",\""
                                                        },
                                                        right: {
                                                            type: "Identifier",
                                                            name: "ne"
                                                        }
                                                    },
                                                    alternate: {
                                                        type: "Literal",
                                                        value: "",
                                                        raw: "\"\""
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "name"
                                        }
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "n"
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "te"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "SetHint"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Identifier",
                                            name: "n"
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "te"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "mvar"
                                        }
                                    },
                                    right: {
                                        type: "ThisExpression"
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "lbl"
                                        }
                                    },
                                    right: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "CreateText"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "ThisExpression"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "name"
                                                }
                                            },
                                            {
                                                type: "Literal",
                                                value: 0.325,
                                                raw: "0.325"
                                            },
                                            {
                                                type: "Identifier",
                                                name: "tsz"
                                            },
                                            {
                                                type: "Literal",
                                                value: "right",
                                                raw: "\"right\""
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "lo"
                                        }
                                    },
                                    right: {
                                        type: "CallExpression",
                                        callee: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "Identifier",
                                                name: "app"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "CreateLayout"
                                            }
                                        },
                                        arguments: [
                                            {
                                                type: "Literal",
                                                value: "linear",
                                                raw: "\"linear\""
                                            },
                                            {
                                                type: "Literal",
                                                value: "horizontal",
                                                raw: "\"horizontal\""
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "lo"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "AddChild"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "lbl"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "lo"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "AddChild"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "te"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "lo"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "SetSize"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "Literal",
                                            value: 0.8,
                                            raw: "0.8"
                                        },
                                        {
                                            type: "Identifier",
                                            name: "tesz"
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "tf"
                                        }
                                    },
                                    right: {
                                        type: "FunctionExpression",
                                        generator: False,
                                        expression: False,
                                        isAsync: True,
                                        params: [],
                                        body: {
                                            type: "BlockStatement",
                                            body: [
                                                {
                                                    type: "VariableDeclaration",
                                                    declarations: [
                                                        {
                                                            type: "VariableDeclarator",
                                                            id: {
                                                                type: "Identifier",
                                                                name: "res2"
                                                            }
                                                        },
                                                        {
                                                            type: "VariableDeclarator",
                                                            id: {
                                                                type: "Identifier",
                                                                name: "res3"
                                                            }
                                                        }
                                                    ],
                                                    kind: "let"
                                                },
                                                {
                                                    type: "VariableDeclaration",
                                                    declarations: [
                                                        {
                                                            type: "VariableDeclarator",
                                                            id: {
                                                                type: "Identifier",
                                                                name: "res1"
                                                            },
                                                            init: {
                                                                type: "CallExpression",
                                                                callee: {
                                                                    type: "MemberExpression",
                                                                    computed: False,
                                                                    object: {
                                                                        type: "ThisExpression"
                                                                    },
                                                                    property: {
                                                                        type: "Identifier",
                                                                        name: "GetText"
                                                                    }
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ],
                                                    kind: "let"
                                                },
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "res2"
                                                        },
                                                        right: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "Identifier",
                                                                name: "txtpa"
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "Identifier",
                                                                    name: "res1"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "AssignmentExpression",
                                                        operator: "=",
                                                        left: {
                                                            type: "Identifier",
                                                            name: "res3"
                                                        },
                                                        right: {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "Identifier",
                                                                    name: "res2"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "reduce"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    type: "ArrowFunctionExpression",
                                                                    generator: False,
                                                                    isAsync: False,
                                                                    params: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "a"
                                                                        },
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "c"
                                                                        }
                                                                    ],
                                                                    body: {
                                                                        type: "BlockStatement",
                                                                        body: [
                                                                            {
                                                                                type: "ReturnStatement",
                                                                                argument: {
                                                                                    type: "BinaryExpression",
                                                                                    operator: "+",
                                                                                    left: {
                                                                                        type: "Identifier",
                                                                                        name: "a"
                                                                                    },
                                                                                    right: {
                                                                                        type: "Identifier",
                                                                                        name: "c"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    expression: False
                                                                },
                                                                {
                                                                    type: "Literal",
                                                                    value: 0,
                                                                    raw: "0"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    type: "IfStatement",
                                                    test: {
                                                        type: "BinaryExpression",
                                                        operator: "==",
                                                        left: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "res2"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "length"
                                                            }
                                                        },
                                                        right: {
                                                            type: "Literal",
                                                            value: 0,
                                                            raw: "0"
                                                        }
                                                    },
                                                    consequent: {
                                                        type: "BlockStatement",
                                                        body: []
                                                    }
                                                },
                                                {
                                                    type: "ExpressionStatement",
                                                    expression: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "Identifier",
                                                                name: "app"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "ShowPopup"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                type: "BinaryExpression",
                                                                operator: "+",
                                                                left: {
                                                                    type: "BinaryExpression",
                                                                    operator: "+",
                                                                    left: {
                                                                        type: "BinaryExpression",
                                                                        operator: "+",
                                                                        left: {
                                                                            type: "BinaryExpression",
                                                                            operator: "+",
                                                                            left: {
                                                                                type: "MemberExpression",
                                                                                computed: False,
                                                                                object: {
                                                                                    type: "MemberExpression",
                                                                                    computed: False,
                                                                                    object: {
                                                                                        type: "ThisExpression"
                                                                                    },
                                                                                    property: {
                                                                                        type: "Identifier",
                                                                                        name: "mvar"
                                                                                    }
                                                                                },
                                                                                property: {
                                                                                    type: "Identifier",
                                                                                    name: "name"
                                                                                }
                                                                            },
                                                                            right: {
                                                                                type: "Literal",
                                                                                value: ": ",
                                                                                raw: "\": \""
                                                                            }
                                                                        },
                                                                        right: {
                                                                            type: "Identifier",
                                                                            name: "res1"
                                                                        }
                                                                    },
                                                                    right: {
                                                                        type: "Literal",
                                                                        value: " = ",
                                                                        raw: "\" = \""
                                                                    }
                                                                },
                                                                right: {
                                                                    type: "CallExpression",
                                                                    callee: {
                                                                        type: "Identifier",
                                                                        name: "ncs"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            type: "Identifier",
                                                                            name: "res3"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "te"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "SetOnTouch"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "tf"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "AssignmentExpression",
                                    operator: "=",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "cf"
                                        }
                                    },
                                    right: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "tf"
                                        }
                                    }
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "te"
                                            }
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "SetOnChange"
                                        }
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "cf"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "set_color"
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "te"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "set_color"
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "lbl"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                type: "ExpressionStatement",
                                expression: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "set_color"
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "lo"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    generator: False
                },
                kind: "constructor",
                static: False
            },
            {
                type: "MethodDefinition",
                key: {
                    type: "Identifier",
                    name: "save"
                },
                computed: False,
                value: {
                    type: "FunctionExpression",
                    generator: False,
                    expression: False,
                    isAsync: True,
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "txt"
                                        },
                                        init: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "ThisExpression"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "te"
                                                    }
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "GetText"
                                                }
                                            },
                                            arguments: []
                                        }
                                    }
                                ],
                                kind: "let"
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "ia"
                                        },
                                        init: {
                                            type: "CallExpression",
                                            callee: {
                                                type: "Identifier",
                                                name: "txtpa"
                                            },
                                            arguments: [
                                                {
                                                    type: "Identifier",
                                                    name: "txt"
                                                }
                                            ]
                                        }
                                    }
                                ],
                                kind: "let"
                            },
                            {
                                type: "VariableDeclaration",
                                declarations: [
                                    {
                                        type: "VariableDeclarator",
                                        id: {
                                            type: "Identifier",
                                            name: "acc"
                                        },
                                        init: {
                                            type: "Literal",
                                            value: 0,
                                            raw: "0"
                                        }
                                    }
                                ],
                                kind: "let"
                            },
                            {
                                type: "ForOfStatement",
                                left: {
                                    type: "VariableDeclaration",
                                    declarations: [
                                        {
                                            type: "VariableDeclarator",
                                            id: {
                                                type: "Identifier",
                                                name: "ci"
                                            }
                                        }
                                    ],
                                    kind: "let"
                                },
                                right: {
                                    type: "Identifier",
                                    name: "ia"
                                },
                                body: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "Identifier",
                                                    name: "acc"
                                                },
                                                right: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "nc"
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "BinaryExpression",
                                                            operator: "+",
                                                            left: {
                                                                type: "Identifier",
                                                                name: "acc"
                                                            },
                                                            right: {
                                                                type: "Identifier",
                                                                name: "ci"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AwaitExpression",
                                                argument: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "ThisExpression"
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "newbal"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "Identifier",
                                                            name: "acc"
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                kind: "method",
                static: False
            },
            {
                type: "MethodDefinition",
                key: {
                    type: "Identifier",
                    name: "newbal"
                },
                computed: False,
                value: {
                    type: "FunctionExpression",
                    generator: False,
                    expression: False,
                    isAsync: True,
                    params: [
                        {
                            type: "Identifier",
                            name: "nb"
                        }
                    ],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "IfStatement",
                                test: {
                                    type: "BinaryExpression",
                                    operator: "!==",
                                    left: {
                                        type: "MemberExpression",
                                        computed: False,
                                        object: {
                                            type: "ThisExpression"
                                        },
                                        property: {
                                            type: "Identifier",
                                            name: "num"
                                        }
                                    },
                                    right: {
                                        type: "Identifier",
                                        name: "nb"
                                    }
                                },
                                consequent: {
                                    type: "BlockStatement",
                                    body: [
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AssignmentExpression",
                                                operator: "=",
                                                left: {
                                                    type: "MemberExpression",
                                                    computed: False,
                                                    object: {
                                                        type: "ThisExpression"
                                                    },
                                                    property: {
                                                        type: "Identifier",
                                                        name: "num"
                                                    }
                                                },
                                                right: {
                                                    type: "Identifier",
                                                    name: "nb"
                                                }
                                            }
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AwaitExpression",
                                                argument: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "MemberExpression",
                                                        computed: False,
                                                        object: {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "te"
                                                            }
                                                        },
                                                        property: {
                                                            type: "Identifier",
                                                            name: "SetText"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "CallExpression",
                                                            callee: {
                                                                type: "MemberExpression",
                                                                computed: False,
                                                                object: {
                                                                    type: "ThisExpression"
                                                                },
                                                                property: {
                                                                    type: "Identifier",
                                                                    name: "toString"
                                                                }
                                                            },
                                                            arguments: []
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            type: "ExpressionStatement",
                                            expression: {
                                                type: "AwaitExpression",
                                                argument: {
                                                    type: "CallExpression",
                                                    callee: {
                                                        type: "Identifier",
                                                        name: "SaveNumber"
                                                    },
                                                    arguments: [
                                                        {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "name"
                                                            }
                                                        },
                                                        {
                                                            type: "MemberExpression",
                                                            computed: False,
                                                            object: {
                                                                type: "ThisExpression"
                                                            },
                                                            property: {
                                                                type: "Identifier",
                                                                name: "num"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            type: "IfStatement",
                                            test: {
                                                type: "MemberExpression",
                                                computed: False,
                                                object: {
                                                    type: "ThisExpression"
                                                },
                                                property: {
                                                    type: "Identifier",
                                                    name: "isbal"
                                                }
                                            },
                                            consequent: {
                                                type: "ExpressionStatement",
                                                expression: {
                                                    type: "AwaitExpression",
                                                    argument: {
                                                        type: "CallExpression",
                                                        callee: {
                                                            type: "Identifier",
                                                            name: "log_balances"
                                                        },
                                                        arguments: []
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                kind: "method",
                static: False
            },
            {
                type: "MethodDefinition",
                key: {
                    type: "Identifier",
                    name: "toString"
                },
                computed: False,
                value: {
                    type: "FunctionExpression",
                    expression: False,
                    isAsync: False,
                    params: [],
                    body: {
                        type: "BlockStatement",
                        body: [
                            {
                                type: "ReturnStatement",
                                argument: {
                                    type: "CallExpression",
                                    callee: {
                                        type: "Identifier",
                                        name: "ncs"
                                    },
                                    arguments: [
                                        {
                                            type: "MemberExpression",
                                            computed: False,
                                            object: {
                                                type: "ThisExpression"
                                            },
                                            property: {
                                                type: "Identifier",
                                                name: "num"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    generator: False
                },
                kind: "method",
                static: False
            }
        ]
    }
}
